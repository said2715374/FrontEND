{"remainingRequest":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\user\\Desktop\\serveurr\\vue_js\\src\\pages\\productsview.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\src\\pages\\productsview.vue","mtime":1713232123647},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\.babelrc","mtime":1713232126048},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1713232209249},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\babel-loader\\lib\\index.js","mtime":1713232210282},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1713232209249},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\vue-loader\\lib\\index.js","mtime":1713232211778}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:/Users/user/Desktop/serveurr/vue_js/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BCard, BCardHeader, BCardBody, BCollapse, BModal } from 'bootstrap-vue';\nimport axios from 'axios';\nexport default {\n  components: {\n    BCard: BCard,\n    BCardHeader: BCardHeader,\n    BCardBody: BCardBody,\n    BCollapse: BCollapse,\n    BModal: BModal\n  },\n  data: function data() {\n    return {\n      isCollapsed: false,\n      formData: {\n        name: '',\n        entryDate: '',\n        expirationDate: '',\n        quantity: '',\n        price: '',\n        MagasinId: ''\n      },\n      editFormData: {\n        name: '',\n        entryDate: '',\n        expirationDate: '',\n        quantity: '',\n        price: '',\n        MagasinId: ''\n      },\n      table1: {\n        title: \"Table des produits\",\n        subTitle: \"produits\",\n        columns: [\"ID\", \"Name\", \"Entry Date\", \"Expiration Date\", \"Quantity\", \"Price\", \"Store ID\"],\n        data: [] // Initialize as an empty array\n      },\n      stores: [] // Initialize stores array\n    };\n  },\n  mounted: function mounted() {\n    this.fetchRoles(); // Fetch roles when the component is mounted\n    this.fetchStores(); // Fetch stores when the component is mounted\n  },\n  methods: {\n    toggleCollapse: function toggleCollapse() {\n      this.isCollapsed = !this.isCollapsed;\n    },\n    fetchRoles: function () {\n      var _fetchRoles = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n        var response;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return axios.get('http://localhost:5000/produitRouter/produits');\n            case 3:\n              response = _context.sent;\n              // Map fetched data to match the table structure and format dates\n              this.table1.data = response.data.data.map(function (product) {\n                return {\n                  ID: product.id,\n                  Name: product.nom,\n                  \"Entry Date\": _this.formatDate(product.dateEntree),\n                  \"Expiration Date\": _this.formatDate(product.dateExpiration),\n                  Quantity: product.quantite,\n                  Price: product.prix,\n                  \"Store ID\": product.MagasinId\n                };\n              });\n              _context.next = 10;\n              break;\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.error('Error fetching products:', _context.t0);\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[0, 7]]);\n      }));\n      function fetchRoles() {\n        return _fetchRoles.apply(this, arguments);\n      }\n      return fetchRoles;\n    }(),\n    fetchStores: function () {\n      var _fetchStores = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var response;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return axios.get('http://localhost:5000/magasinRouter');\n            case 3:\n              response = _context2.sent;\n              this.stores = response.data.data;\n              _context2.next = 10;\n              break;\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error('Error fetching stores:', _context2.t0);\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[0, 7]]);\n      }));\n      function fetchStores() {\n        return _fetchStores.apply(this, arguments);\n      }\n      return fetchStores;\n    }(),\n    submitForm: function () {\n      var _submitForm = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var response;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return axios.post('http://localhost:5000/produitRouter/produits', {\n                nom: this.formData.name,\n                dateEntree: this.formData.entryDate,\n                dateExpiration: this.formData.expirationDate,\n                quantite: this.formData.quantity,\n                prix: this.formData.price,\n                MagasinId: this.formData.MagasinId // Include MagasinId in the request\n              });\n            case 3:\n              response = _context3.sent;\n              if (!(response.status === 201)) {\n                _context3.next = 14;\n                break;\n              }\n              this.table1.data.push({\n                ID: response.data.id,\n                Name: response.data.nom,\n                \"Entry Date\": this.formatDate(response.data.dateEntree),\n                \"Expiration Date\": this.formatDate(response.data.dateExpiration),\n                Quantity: response.data.quantite,\n                Price: response.data.prix,\n                \"Store ID\": response.data.MagasinId\n              });\n              // Clear the form after adding the product\n              _context3.next = 8;\n              return this.fetchRoles();\n            case 8:\n              this.formData.name = '';\n              this.formData.entryDate = '';\n              this.formData.expirationDate = '';\n              this.formData.quantity = '';\n              this.formData.price = '';\n              this.formData.MagasinId = ''; // Reset MagasinId after submission\n            case 14:\n              _context3.next = 19;\n              break;\n            case 16:\n              _context3.prev = 16;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.error('Error adding product:', _context3.t0);\n            case 19:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[0, 16]]);\n      }));\n      function submitForm() {\n        return _submitForm.apply(this, arguments);\n      }\n      return submitForm;\n    }(),\n    formatDate: function formatDate(dateString) {\n      // Parse the date string into a Date object\n      var date = new Date(dateString);\n      // Format the date as desired (e.g., MM/DD/YYYY)\n      var formattedDate = \"\".concat(date.getMonth() + 1, \"/\").concat(date.getDate(), \"/\").concat(date.getFullYear());\n      return formattedDate;\n    },\n    deleteRole: function deleteRole(role) {\n      var _this2 = this;\n      var confirmation = confirm(\"Are you sure you want to delete this role?\");\n      if (confirmation) {\n        axios.delete(\"http://localhost:5000/produitRouter/produits/\".concat(role.ID)).then(function () {\n          _this2.fetchRoles(); // Refresh the table after deletion\n        }).catch(function (error) {\n          console.error('Error deleting role:', error);\n        });\n      }\n    },\n    editRole: function editRole(role) {\n      // Set editFormData with the role data\n      this.editFormData = {\n        ID: role.ID,\n        name: role.Name,\n        entryDate: role[\"Entry Date\"],\n        expirationDate: role[\"Expiration Date\"],\n        quantity: role.Quantity,\n        price: role.Price,\n        MagasinId: role[\"Store ID\"]\n      };\n      // Show the edit modal\n      this.$refs.editModal.show();\n    },\n    submitEditForm: function submitEditForm() {\n      var _this3 = this;\n      try {\n        // Send PUT request to update the product\n        axios.put(\"http://localhost:5000/produitRouter/produits/\".concat(this.editFormData.ID), {\n          nom: this.editFormData.name,\n          dateEntree: this.editFormData.entryDate,\n          dateExpiration: this.editFormData.expirationDate,\n          quantite: this.editFormData.quantity,\n          prix: this.editFormData.price,\n          MagasinId: this.editFormData.MagasinId\n        }).then(function () {\n          // Find the index of the edited product in the table data\n          var index = _this3.table1.data.findIndex(function (item) {\n            return item.ID === _this3.editFormData.ID;\n          });\n          // If the index is found, update the product data\n          if (index !== -1) {\n            _this3.table1.data[index].Name = _this3.editFormData.name;\n            _this3.table1.data[index][\"Entry Date\"] = _this3.editFormData.entryDate;\n            _this3.table1.data[index][\"Expiration Date\"] = _this3.editFormData.expirationDate;\n            _this3.table1.data[index].Quantity = _this3.editFormData.quantity;\n            _this3.table1.data[index].Price = _this3.editFormData.price;\n            _this3.table1.data[index][\"Store ID\"] = _this3.editFormData.MagasinId;\n          }\n          _this3.$refs.editModal.hide();\n        }).catch(function (error) {\n          console.error('Error editing product:', error);\n        });\n      } catch (error) {\n        console.error('Error editing product:', error);\n      }\n    }\n  }\n};",{"version":3,"names":["BCard","BCardHeader","BCardBody","BCollapse","BModal","axios","components","data","isCollapsed","formData","name","entryDate","expirationDate","quantity","price","MagasinId","editFormData","table1","title","subTitle","columns","stores","mounted","fetchRoles","fetchStores","methods","toggleCollapse","_fetchRoles","_asyncToGenerator","regeneratorRuntime","mark","_callee","_this","response","wrap","_callee$","_context","prev","next","get","sent","map","product","ID","id","Name","nom","formatDate","dateEntree","dateExpiration","Quantity","quantite","Price","prix","t0","console","error","stop","apply","arguments","_fetchStores","_callee2","_callee2$","_context2","submitForm","_submitForm","_callee3","_callee3$","_context3","post","status","push","dateString","date","Date","formattedDate","concat","getMonth","getDate","getFullYear","deleteRole","role","_this2","confirmation","confirm","delete","then","catch","editRole","$refs","editModal","show","submitEditForm","_this3","put","index","findIndex","item","hide"],"sources":["src/pages/productsview.vue"],"sourcesContent":["<template>\r\n  <div class=\"row\">\r\n    <div class=\"col-12\">\r\n      <!-- Collapsible form -->\r\n      <b-card>\r\n        <b-card-header id=\"formCollapseHeader\">\r\n          <h5 class=\"mb-0\">\r\n            <button class=\"btn btn-link\" type=\"button\" @click=\"toggleCollapse\">\r\n              Ajouter un produit\r\n              <span class=\"arrow\" :class=\"{ 'rotated': isCollapsed }\"></span>\r\n            </button>\r\n          </h5>\r\n        </b-card-header>\r\n\r\n        <b-collapse id=\"formCollapse\" v-model=\"isCollapsed\">\r\n          <b-card-body>\r\n            <form @submit.prevent=\"submitForm\">\r\n              <div class=\"form-group\">\r\n                <label for=\"productName\">Nom du produit:</label>\r\n                <input v-model=\"formData.name\" type=\"text\" class=\"form-control\" id=\"productName\" placeholder=\"Enter nom de produit\" required>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label for=\"entryDate\">Entry Date:</label>\r\n                <input v-model=\"formData.entryDate\" type=\"date\" class=\"form-control\" id=\"entryDate\" required>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label for=\"expirationDate\">Expiration Date:</label>\r\n                <input v-model=\"formData.expirationDate\" type=\"date\" class=\"form-control\" id=\"expirationDate\" required>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label for=\"quantity\">Quantity:</label>\r\n                <input v-model=\"formData.quantity\" type=\"number\" class=\"form-control\" id=\"quantity\" placeholder=\"Enter Quantity\" required>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label for=\"price\">Prix:</label>\r\n                <input v-model=\"formData.price\" type=\"number\" class=\"form-control\" id=\"prix\" placeholder=\"Enter Prix\" required>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label for=\"MagasinId\">magasin ID:</label>\r\n                <select v-model=\"formData.MagasinId\" class=\"form-control\" id=\"MagasinId\" required>\r\n                  <option v-for=\"store in stores\" :value=\"store.id\" :key=\"store.id\">{{ store.id }}</option>\r\n                </select>\r\n              </div>\r\n              <button type=\"submit\" class=\"btn btn-primary\">Ajouter un produit</button>\r\n            </form>\r\n          </b-card-body>\r\n        </b-collapse>\r\n      </b-card>\r\n\r\n      <!-- Bootstrap Modal for Edit -->\r\n      <b-modal ref=\"editModal\" title=\"Edit Product\" @ok=\"submitEditForm\">\r\n        <div>\r\n          <div class=\"form-group\">\r\n            <label for=\"editProductName\">Nom du produit:</label>\r\n            <input v-model=\"editFormData.name\" type=\"text\" class=\"form-control\" id=\"editProductName\" required>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"editEntryDate\">Entry Date:</label>\r\n            <input v-model=\"editFormData.entryDate\" type=\"date\" class=\"form-control\" id=\"editEntryDate\" required>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"editExpirationDate\">Expiration Date:</label>\r\n            <input v-model=\"editFormData.expirationDate\" type=\"date\" class=\"form-control\" id=\"editExpirationDate\" required>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"editQuantity\">Quantity:</label>\r\n            <input v-model=\"editFormData.quantity\" type=\"number\" class=\"form-control\" id=\"editQuantity\" required>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"editPrice\">Price:</label>\r\n            <input v-model=\"editFormData.price\" type=\"number\" class=\"form-control\" id=\"editPrice\" required>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"editMagasinId\">magasin ID:</label>\r\n            <select v-model=\"editFormData.MagasinId\" class=\"form-control\" id=\"editMagasinId\" required>\r\n              <option v-for=\"store in stores\" :value=\"store.id\" :key=\"store.id\">{{ store.id }}</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </b-modal>\r\n\r\n      <!-- Your existing card -->\r\n      <card :title=\"table1.title\" :subTitle=\"table1.subTitle\">\r\n        <div slot=\"raw-content\" class=\"table-responsive\">\r\n          <table class=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th v-for=\"column in table1.columns\" :key=\"column\">{{ column }}</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr v-for=\"(item, index) in table1.data\" :key=\"index\">\r\n                <td v-for=\"(value, key) in item\" :key=\"key\">{{ value }}</td>\r\n                <td>\r\n                  <button class=\"btn btn-danger\" @click=\"deleteRole(item)\">Delete</button>\r\n                  <button class=\"btn btn-warning\" @click=\"editRole(item)\">Edit</button>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </card>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { BCard, BCardHeader, BCardBody, BCollapse, BModal } from 'bootstrap-vue';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  components: {\r\n    BCard,\r\n    BCardHeader,\r\n    BCardBody,\r\n    BCollapse,\r\n    BModal,\r\n  },\r\n  data() {\r\n    return {\r\n      isCollapsed: false,\r\n      formData: {\r\n        name: '',\r\n        entryDate: '',\r\n        expirationDate: '',\r\n        quantity: '',\r\n        price: '',\r\n        MagasinId: ''\r\n      },\r\n      editFormData: {\r\n        name: '',\r\n        entryDate: '',\r\n        expirationDate: '',\r\n        quantity: '',\r\n        price: '',\r\n        MagasinId: ''\r\n      },\r\n      table1: {\r\n        title: \"Table des produits\",\r\n        subTitle: \"produits\",\r\n        columns: [\"ID\", \"Name\", \"Entry Date\", \"Expiration Date\", \"Quantity\", \"Price\", \"Store ID\"],\r\n        data: [] // Initialize as an empty array\r\n      },\r\n      stores: [] // Initialize stores array\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchRoles(); // Fetch roles when the component is mounted\r\n    this.fetchStores(); // Fetch stores when the component is mounted\r\n  },\r\n  methods: {\r\n    toggleCollapse() {\r\n      this.isCollapsed = !this.isCollapsed;\r\n    },\r\n    async fetchRoles() {\r\n      try {\r\n        // Fetch products from your server-side endpoint\r\n        const response = await axios.get('http://localhost:5000/produitRouter/produits');\r\n        // Map fetched data to match the table structure and format dates\r\n        this.table1.data = response.data.data.map(product => ({\r\n          ID: product.id,\r\n          Name: product.nom,\r\n          \"Entry Date\": this.formatDate(product.dateEntree),\r\n          \"Expiration Date\": this.formatDate(product.dateExpiration),\r\n          Quantity: product.quantite,\r\n          Price: product.prix,\r\n          \"Store ID\": product.MagasinId\r\n        }));\r\n      } catch (error) {\r\n        console.error('Error fetching products:', error);\r\n      }\r\n    },\r\n    async fetchStores() {\r\n      try {\r\n        // Fetch stores from your server-side endpoint\r\n        const response = await axios.get('http://localhost:5000/magasinRouter');\r\n        this.stores = response.data.data;\r\n      } catch (error) {\r\n        console.error('Error fetching stores:', error);\r\n      }\r\n    },\r\n    async submitForm() {\r\n      try {\r\n        // Send POST request to add a new product\r\n        const response = await axios.post('http://localhost:5000/produitRouter/produits', {\r\n          nom: this.formData.name,\r\n          dateEntree: this.formData.entryDate,\r\n          dateExpiration: this.formData.expirationDate,\r\n          quantite: this.formData.quantity,\r\n          prix: this.formData.price,\r\n          MagasinId: this.formData.MagasinId // Include MagasinId in the request\r\n        });\r\n        // Update the table data if the request is successful\r\n        if (response.status === 201) {\r\n          this.table1.data.push({\r\n            ID: response.data.id,\r\n            Name: response.data.nom,\r\n            \"Entry Date\": this.formatDate(response.data.dateEntree),\r\n            \"Expiration Date\": this.formatDate(response.data.dateExpiration),\r\n            Quantity: response.data.quantite,\r\n            Price: response.data.prix,\r\n            \"Store ID\": response.data.MagasinId\r\n          });\r\n          // Clear the form after adding the product\r\n          await this.fetchRoles();\r\n          this.formData.name = '';\r\n          this.formData.entryDate = '';\r\n          this.formData.expirationDate = '';\r\n          this.formData.quantity = '';\r\n          this.formData.price = '';\r\n          this.formData.MagasinId = ''; // Reset MagasinId after submission\r\n        }\r\n      } catch (error) {\r\n        console.error('Error adding product:', error);\r\n      }\r\n    },\r\n    formatDate(dateString) {\r\n      // Parse the date string into a Date object\r\n      const date = new Date(dateString);\r\n      // Format the date as desired (e.g., MM/DD/YYYY)\r\n      const formattedDate = `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;\r\n      return formattedDate;\r\n    },\r\n    deleteRole(role) {\r\n      const confirmation = confirm(\"Are you sure you want to delete this role?\");\r\n      if (confirmation) {\r\n        axios.delete(`http://localhost:5000/produitRouter/produits/${role.ID}`)\r\n          .then(() => {\r\n            this.fetchRoles(); // Refresh the table after deletion\r\n          })\r\n          .catch(error => {\r\n            console.error('Error deleting role:', error);\r\n          });\r\n      }\r\n    },\r\n    editRole(role) {\r\n      // Set editFormData with the role data\r\n      this.editFormData = {\r\n        ID: role.ID,\r\n        name: role.Name,\r\n        entryDate: role[\"Entry Date\"],\r\n        expirationDate: role[\"Expiration Date\"],\r\n        quantity: role.Quantity,\r\n        price: role.Price,\r\n        MagasinId: role[\"Store ID\"]\r\n      };\r\n      // Show the edit modal\r\n      this.$refs.editModal.show();\r\n    },\r\n    submitEditForm() {\r\n  try {\r\n    // Send PUT request to update the product\r\n    axios.put(`http://localhost:5000/produitRouter/produits/${this.editFormData.ID}`, {\r\n      nom: this.editFormData.name,\r\n      dateEntree: this.editFormData.entryDate,\r\n      dateExpiration: this.editFormData.expirationDate,\r\n      quantite: this.editFormData.quantity,\r\n      prix: this.editFormData.price,\r\n      MagasinId: this.editFormData.MagasinId\r\n    })\r\n    .then(() => {\r\n      // Find the index of the edited product in the table data\r\n      const index = this.table1.data.findIndex(item => item.ID === this.editFormData.ID);\r\n      // If the index is found, update the product data\r\n      if (index !== -1) {\r\n        \r\n        this.table1.data[index].Name = this.editFormData.name;\r\n        this.table1.data[index][\"Entry Date\"] = this.editFormData.entryDate;\r\n        this.table1.data[index][\"Expiration Date\"] = this.editFormData.expirationDate;\r\n        this.table1.data[index].Quantity = this.editFormData.quantity;\r\n        this.table1.data[index].Price = this.editFormData.price;\r\n        this.table1.data[index][\"Store ID\"] = this.editFormData.MagasinId;\r\n        \r\n      }\r\n      this.$refs.editModal.hide(); \r\n    })\r\n    .catch(error => {\r\n      console.error('Error editing product:', error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error editing product:', error);\r\n  }\r\n}\r\n    \r\n\r\n\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Styling for the arrow */\r\n.arrow {\r\n  display: inline-block;\r\n  width: 0;\r\n  height: 0;\r\n  vertical-align: middle;\r\n  border: solid;\r\n  border-width: 0.2em 0.2em 0 0.2em;\r\n  border-color: #000000;\r\n  transition: transform 0.3s;\r\n}\r\n\r\n/* Styling for the arrow when the form is collapsed */\r\n.rotated {\r\n  transform: rotate(-90deg);\r\n}\r\n\r\n.card .card-body {\r\n  padding: 15px 15px 20px 15px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]}]}