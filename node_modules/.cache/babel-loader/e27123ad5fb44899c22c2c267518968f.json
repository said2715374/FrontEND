{"remainingRequest":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\user\\Desktop\\serveurr\\vue_js\\src\\pages\\Users.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\src\\pages\\Users.vue","mtime":1713232124618},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\.babelrc","mtime":1713232126048},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1713232209249},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\babel-loader\\lib\\index.js","mtime":1713232210282},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1713232209249},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\vue-loader\\lib\\index.js","mtime":1713232211778}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:/Users/user/Desktop/serveurr/vue_js/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BCard, BCardHeader, BCardBody, BCollapse } from 'bootstrap-vue';\nimport axios from 'axios';\nexport default {\n  components: {\n    BCard: BCard,\n    BCardHeader: BCardHeader,\n    BCardBody: BCardBody,\n    BCollapse: BCollapse\n  },\n  data: function data() {\n    return {\n      isCollapsed: false,\n      formData: {\n        role: ''\n      },\n      table1: {\n        title: \"Tableau des utilisateurs\",\n        subTitle: \"utilisateurs\",\n        columns: [\"Id\", \"nom\", \"prenom\", \"DateNaissance\", \"Telephone\", \"Email\", \"RoleId\", \"MagasinId\"],\n        data: [] // Initialize as empty array\n      },\n      roles: [],\n      // Array to store fetched roles\n      magasins: [] // Array to store fetched magasins\n    };\n  },\n  mounted: function mounted() {\n    this.fetchUsers(); // Fetch roles when the component is mounted\n    this.fetchRoles(); // Fetch roles options\n    this.fetchMagasins(); // Fetch magasins options\n  },\n  methods: {\n    deleteUser: function deleteUser(user) {\n      var _this = this;\n      var confirmation = confirm(\"Are you sure you want to delete this user?\");\n      if (confirmation) {\n        axios.delete(\"http://localhost:5000/utilisateurs/\".concat(user.Id)).then(function () {\n          _this.fetchUsers(); // Refresh the table after deletion\n        }).catch(function (error) {\n          console.error('Error deleting user:', error);\n        });\n      }\n    },\n    fetchRoles: function () {\n      var _fetchRoles = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var response;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return axios.get('http://localhost:5000/role');\n            case 3:\n              response = _context.sent;\n              // Store fetched roles options\n              this.roles = response.data.data;\n              _context.next = 10;\n              break;\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.error('Error fetching Roles:', _context.t0);\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[0, 7]]);\n      }));\n      function fetchRoles() {\n        return _fetchRoles.apply(this, arguments);\n      }\n      return fetchRoles;\n    }(),\n    fetchMagasins: function () {\n      var _fetchMagasins = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var response;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return axios.get('http://localhost:5000/magasinRouter');\n            case 3:\n              response = _context2.sent;\n              // Store fetched magasins options\n              this.magasins = response.data.data;\n              _context2.next = 10;\n              break;\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error('Error fetching Magasins:', _context2.t0);\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[0, 7]]);\n      }));\n      function fetchMagasins() {\n        return _fetchMagasins.apply(this, arguments);\n      }\n      return fetchMagasins;\n    }(),\n    toggleCollapse: function toggleCollapse() {\n      this.isCollapsed = !this.isCollapsed;\n    },\n    fetchUsers: function () {\n      var _fetchUsers = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n        var response;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return axios.get('http://localhost:5000/utilisateurs');\n            case 3:\n              response = _context3.sent;\n              this.table1.data = response.data.data.map(function (user) {\n                return {\n                  Id: user.id,\n                  nom: user.nom,\n                  prenom: user.prenom,\n                  DateNaissance: _this2.formatDate(user.DateNaissance),\n                  Telephone: user.Telephone,\n                  email: user.email,\n                  RoleId: user.RoleId,\n                  MagasinId: user.MagasinId,\n                  editable: false\n                };\n              });\n              _context3.next = 10;\n              break;\n            case 7:\n              _context3.prev = 7;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.error('Error fetching Users:', _context3.t0);\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[0, 7]]);\n      }));\n      function fetchUsers() {\n        return _fetchUsers.apply(this, arguments);\n      }\n      return fetchUsers;\n    }(),\n    submitForm: function () {\n      var _submitForm = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n        var response;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return axios.post('http://localhost:5000/utilisateurs', this.formData);\n            case 3:\n              response = _context4.sent;\n              // Update the table data if the request is successful\n              if (response.status === 201) {\n                // Fetch updated user data after successful addition\n                this.fetchUsers();\n                // Clear the form after adding the user\n                this.formData = {\n                  nom: '',\n                  prenom: '',\n                  DateNaissance: '',\n                  Telephone: '',\n                  email: '',\n                  MotDePasse: '',\n                  RoleId: '',\n                  MagasinId: ''\n                };\n              }\n              _context4.next = 10;\n              break;\n            case 7:\n              _context4.prev = 7;\n              _context4.t0 = _context4[\"catch\"](0);\n              console.error('Error adding user:', _context4.t0);\n            case 10:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this, [[0, 7]]);\n      }));\n      function submitForm() {\n        return _submitForm.apply(this, arguments);\n      }\n      return submitForm;\n    }(),\n    toggleEdit: function toggleEdit(item) {\n      if (item.editable) {\n        // Send PUT request to update the user data\n        axios.put(\"http://localhost:5000/utilisateurs/\".concat(item.Id), item).then(function () {\n          item.editable = false;\n        }).catch(function (error) {\n          console.error('Error updating user:', error);\n        });\n      } else {\n        item.editable = true; // Set editable to true to enable inline editing\n      }\n    },\n    formatDate: function formatDate(dateString) {\n      // Parse the date string into a Date object\n      var date = new Date(dateString);\n      // Format the date as desired (e.g., YYYY-MM-DD)\n      return date.toISOString().split('T')[0];\n    }\n  }\n};",{"version":3,"names":["BCard","BCardHeader","BCardBody","BCollapse","axios","components","data","isCollapsed","formData","role","table1","title","subTitle","columns","roles","magasins","mounted","fetchUsers","fetchRoles","fetchMagasins","methods","deleteUser","user","_this","confirmation","confirm","delete","concat","Id","then","catch","error","console","_fetchRoles","_asyncToGenerator","regeneratorRuntime","mark","_callee","response","wrap","_callee$","_context","prev","next","get","sent","t0","stop","apply","arguments","_fetchMagasins","_callee2","_callee2$","_context2","toggleCollapse","_fetchUsers","_callee3","_this2","_callee3$","_context3","map","id","nom","prenom","DateNaissance","formatDate","Telephone","email","RoleId","MagasinId","editable","submitForm","_submitForm","_callee4","_callee4$","_context4","post","status","MotDePasse","toggleEdit","item","put","dateString","date","Date","toISOString","split"],"sources":["src/pages/Users.vue"],"sourcesContent":["<template>\n  <div class=\"row\">\n    <div class=\"col-12\">\n      <!-- Collapsible form -->\n      <b-card>\n        <b-card-header id=\"formCollapseHeader\">\n          <h5 class=\"mb-0\">\n            <button class=\"btn btn-link\" type=\"button\" @click=\"toggleCollapse\">\n              Ajouter un nouvel utilisateur\n              <span class=\"arrow\" :class=\"{ 'rotated': isCollapsed }\"></span>\n            </button>\n          </h5>\n        </b-card-header>\n\n        <b-collapse id=\"formCollapse\" v-model=\"isCollapsed\">\n          <b-card-body>\n            <form @submit.prevent=\"submitForm\">\n              <div class=\"form-group\">\n                <label for=\"nom\">Nom:</label>\n                <input v-model=\"formData.nom\" type=\"text\" class=\"form-control\" id=\"nom\" placeholder=\"Enter Nom\" required>\n              </div>\n              <div class=\"form-group\">\n                <label for=\"prenom\">Prenom:</label>\n                <input v-model=\"formData.prenom\" type=\"text\" class=\"form-control\" id=\"prenom\" placeholder=\"Enter Prenom\" required>\n              </div>\n              <div class=\"form-group\">\n                <label for=\"DateNaissance\">Date de Naissance:</label>\n                <input v-model=\"formData.DateNaissance\" type=\"date\" class=\"form-control\" id=\"DateNaissance\" required>\n              </div>\n              <div class=\"form-group\">\n                <label for=\"Telephone\">Telephone:</label>\n                <input v-model=\"formData.Telephone\" type=\"text\" class=\"form-control\" id=\"Telephone\" placeholder=\"Enter Telephone\" required>\n              </div>\n              <div class=\"form-group\">\n                <label for=\"email\">email:</label>\n                <input v-model=\"formData.email\" type=\"text\" class=\"form-control\" id=\"email\" placeholder=\"Enter email\" required>\n              </div>\n              <div class=\"form-group\">\n                <label for=\"MotDePasse\">Mot de Passe:</label>\n                <input v-model=\"formData.MotDePasse\" type=\"text\" class=\"form-control\" id=\"MotDePasse\" placeholder=\"Enter Mot de Passe\" required>\n              </div>\n              <div class=\"form-group\">\n                <label for=\"RoleId\">Select Role:</label>\n                <select v-model=\"formData.RoleId\" class=\"form-control\" id=\"RoleId\" required>\n                  <option value=\"\" disabled selected>Select Role</option> <!-- Placeholder option -->\n                  <option v-for=\"role in roles\" :key=\"role.id\" :value=\"role.id\">{{ role.role }}</option>\n                </select>\n              </div>\n              <div class=\"form-group\">\n                <label for=\"MagasinId\">Magasin ID:</label>\n                <select v-model=\"formData.MagasinId\" class=\"form-control\" id=\"MagasinId\" >\n                  <option value=\"\" disabled selected>Select Magasin superviseur</option> <!-- Placeholder option -->\n                  <option v-for=\"magasin in magasins\" :key=\"magasin.id\" :value=\"magasin.id\">{{ magasin.superviseur }}</option>\n                </select>\n              </div>\n              <button type=\"submit\" class=\"btn btn-primary\">Add User</button>\n            </form>\n          </b-card-body>\n        </b-collapse>\n      </b-card>\n      \n      <!-- Your existing card -->\n      <card :title=\"table1.title\" :subTitle=\"table1.subTitle\">\n        <div slot=\"raw-content\" class=\"table-responsive\">\n          <table class=\"table\">\n            <thead>\n              <tr>\n                <th v-for=\"column in table1.columns\" :key=\"column\">{{ column }}</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"(item, index) in table1.data\" :key=\"index\">\n                <td v-for=\"(value, key) in item\" :key=\"key\">\n                  <span v-if=\"!item.editable\">{{ value }}</span>\n                  <input v-model=\"item[key]\" v-else class=\"form-control\">\n                </td>\n                <td>\n                  <button class=\"btn btn-danger\" @click=\"deleteUser(item)\">Supprimer</button>\n                  <button class=\"btn btn-warning\" @click=\"toggleEdit(item)\">{{ item.editable ? 'Save' : 'Modifier' }}</button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </card>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { BCard, BCardHeader, BCardBody, BCollapse } from 'bootstrap-vue';\nimport axios from 'axios';\n\nexport default {\n  components: {\n    BCard,\n    BCardHeader,\n    BCardBody,\n    BCollapse,\n  },\n  data() {\n    return {\n      isCollapsed: false,\n      formData: {\n        role: ''\n      },\n      table1: {\n        title: \"Tableau des utilisateurs\",\n        subTitle: \"utilisateurs\",\n        columns: [\"Id\", \"nom\", \"prenom\",\"DateNaissance\", \"Telephone\",\"Email\",\"RoleId\",\"MagasinId\"],\n        data: [] // Initialize as empty array\n      },\n      roles: [], // Array to store fetched roles\n      magasins: [] // Array to store fetched magasins\n    };\n  },\n  mounted() {\n    this.fetchUsers(); // Fetch roles when the component is mounted\n    this.fetchRoles(); // Fetch roles options\n    this.fetchMagasins(); // Fetch magasins options\n  },\n  methods: {\n    deleteUser(user) {\n      const confirmation = confirm(\"Are you sure you want to delete this user?\");\n      if (confirmation) {\n        axios.delete(`http://localhost:5000/utilisateurs/${user.Id}`)\n          .then(() => {\n            this.fetchUsers(); // Refresh the table after deletion\n          })\n          .catch(error => {\n            console.error('Error deleting user:', error);\n          });\n      }\n    },\n    async fetchRoles() {\n      try {\n        // Fetch roles options from your server-side endpoint\n        const response = await axios.get('http://localhost:5000/role');\n        // Store fetched roles options\n        this.roles = response.data.data;\n      } catch (error) {\n        console.error('Error fetching Roles:', error);\n      }\n    },\n    async fetchMagasins() {\n      try {\n        \n        const response = await axios.get('http://localhost:5000/magasinRouter');\n        // Store fetched magasins options\n        this.magasins = response.data.data;\n      } catch (error) {\n        console.error('Error fetching Magasins:', error);\n      }\n    },\n\n    toggleCollapse() {\n      this.isCollapsed = !this.isCollapsed;\n    },\n    async fetchUsers() {\n      try {\n        // Fetch roles from your server-side endpoint\n        const response = await axios.get('http://localhost:5000/utilisateurs');\n        \n        this.table1.data = response.data.data.map(user => ({\n          Id: user.id,\n          nom: user.nom,\n          prenom: user.prenom,\n          DateNaissance: this.formatDate(user.DateNaissance),\n          Telephone: user.Telephone,\n          email: user.email,\n          RoleId: user.RoleId,\n          MagasinId: user.MagasinId,\n          editable: false \n        }));\n      } catch (error) {\n        console.error('Error fetching Users:', error);\n      }\n    },\n    async submitForm() {\n      try {\n        // Send POST request to add a new user\n        const response = await axios.post('http://localhost:5000/utilisateurs', this.formData);\n        // Update the table data if the request is successful\n        if (response.status === 201) {\n          // Fetch updated user data after successful addition\n          this.fetchUsers();\n          // Clear the form after adding the user\n          this.formData = {\n            nom: '',\n            prenom: '',\n            DateNaissance: '',\n            Telephone: '',\n            email: '',\n            MotDePasse: '',\n            RoleId: '',\n            MagasinId: ''\n          };\n        }\n      } catch (error) {\n        console.error('Error adding user:', error);\n      }\n    },\n    toggleEdit(item) {\n      if (item.editable) {\n        // Send PUT request to update the user data\n        axios.put(`http://localhost:5000/utilisateurs/${item.Id}`, item)\n          .then(() => {\n            item.editable = false; \n          })\n          .catch(error => {\n            console.error('Error updating user:', error);\n          });\n      } else {\n        item.editable = true; // Set editable to true to enable inline editing\n      }\n    },\n    formatDate(dateString) {\n      // Parse the date string into a Date object\n      const date = new Date(dateString);\n      // Format the date as desired (e.g., YYYY-MM-DD)\n      return date.toISOString().split('T')[0];\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Styling for the arrow */\n.arrow {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  vertical-align: middle;\n  border: solid;\n  border-width: 0.2em 0.2em 0 0.2em;\n  border-color: #000000;\n  transition: transform 0.3s;\n}\n\n/* Styling for the arrow when the form is collapsed */\n.rotated {\n  transform: rotate(-90deg);\n}\n.card .card-body {\n    padding: 15px 15px 20px 15px;\n}\n.card {\n    border-radius: 6px;\n    box-shadow: 0 2px 2px rgba(204, 197, 185, 0.5);\n    background-color: #FFFFFF;\n    color: #252422;\n    margin-bottom: 20px;\n    position: relative;\n    width: 74rem;\n    z-index: 1;\n    border: none;\n}\n</style>\n"],"mappings":"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","ignoreList":[]}]}