{"remainingRequest":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\user\\Desktop\\serveurr\\vue_js\\src\\pages\\transactionview.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\src\\pages\\transactionview.vue","mtime":1713232124284},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\.babelrc","mtime":1713232126048},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1713232209249},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\babel-loader\\lib\\index.js","mtime":1713232210282},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1713232209249},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\vue-loader\\lib\\index.js","mtime":1713232211778}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:/Users/user/Desktop/serveurr/vue_js/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BCard, BCardHeader, BCardBody, BCollapse, BModal } from 'bootstrap-vue';\nimport axios from 'axios';\nexport default {\n  components: {\n    BCard: BCard,\n    BCardHeader: BCardHeader,\n    BCardBody: BCardBody,\n    BCollapse: BCollapse,\n    BModal: BModal\n  },\n  data: function data() {\n    return {\n      isCollapsed: false,\n      formData: {\n        date: '',\n        employeeNumber: '',\n        amount: '',\n        cashierId: '',\n        paymentModeId: ''\n      },\n      editFormData: {\n        id: '',\n        date: '',\n        employeeNumber: '',\n        amount: '',\n        cashierId: '',\n        paymentModeId: ''\n      },\n      table1: {\n        title: \"Table des transactions\",\n        subTitle: \"transactions\",\n        columns: [\"ID\", \"Date\", \"Employee Number\", \"Amount\", \"Cashier ID\", \"Payment Mode\"],\n        data: [] // Initialize as empty array\n      },\n      caisses: [],\n      // Initialize caisses array\n      paymentModes: [] // Initialize paymentModes array\n    };\n  },\n  mounted: function mounted() {\n    this.fetchProducts();\n    this.fetchCaisses();\n    this.fetchPaymentModes();\n  },\n  methods: {\n    toggleCollapse: function toggleCollapse() {\n      this.isCollapsed = !this.isCollapsed;\n    },\n    fetchProducts: function () {\n      var _fetchProducts = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var response, paymentModesResponse, paymentModes;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return axios.get('http://localhost:5000/transactionRouter');\n            case 3:\n              response = _context.sent;\n              _context.next = 6;\n              return axios.get('http://localhost:5000/modePaiementRouter');\n            case 6:\n              paymentModesResponse = _context.sent;\n              paymentModes = paymentModesResponse.data.data; // Map fetched data to match the table structure\n              this.table1.data = response.data.data.map(function (product) {\n                // Find the corresponding payment mode for the current product's ModePaiementId\n                var paymentMode = paymentModes.find(function (mode) {\n                  return mode.id === product.ModePaiementId;\n                });\n                // If a payment mode is found, use its process value; otherwise, use an empty string\n                var paymentProcess = paymentMode ? paymentMode.process : '';\n                return {\n                  ID: product.id,\n                  Date: product.date,\n                  \"Employee Number\": product.numero_employer,\n                  Amount: product.montant,\n                  \"Cashier ID\": product.CaisseId,\n                  \"Payment Mode\": paymentProcess\n                };\n              });\n              _context.next = 14;\n              break;\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](0);\n              console.error('Error fetching products:', _context.t0);\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[0, 11]]);\n      }));\n      function fetchProducts() {\n        return _fetchProducts.apply(this, arguments);\n      }\n      return fetchProducts;\n    }(),\n    fetchCaisses: function () {\n      var _fetchCaisses = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var response;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return axios.get('http://localhost:5000/caisse');\n            case 3:\n              response = _context2.sent;\n              this.caisses = response.data.data;\n              _context2.next = 10;\n              break;\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error('Error fetching caisses:', _context2.t0);\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[0, 7]]);\n      }));\n      function fetchCaisses() {\n        return _fetchCaisses.apply(this, arguments);\n      }\n      return fetchCaisses;\n    }(),\n    fetchPaymentModes: function () {\n      var _fetchPaymentModes = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var response;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return axios.get('http://localhost:5000/modePaiementRouter');\n            case 3:\n              response = _context3.sent;\n              this.paymentModes = response.data.data;\n              _context3.next = 10;\n              break;\n            case 7:\n              _context3.prev = 7;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.error('Error fetching payment modes:', _context3.t0);\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[0, 7]]);\n      }));\n      function fetchPaymentModes() {\n        return _fetchPaymentModes.apply(this, arguments);\n      }\n      return fetchPaymentModes;\n    }(),\n    submitForm: function () {\n      var _submitForm = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n        var response;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return axios.post('http://localhost:5000/transactionRouter', {\n                date: this.formData.date,\n                numero_employer: this.formData.employeeNumber,\n                montant: this.formData.amount,\n                CaisseId: this.formData.cashierId,\n                ModePaiementId: this.formData.paymentModeId\n              });\n            case 3:\n              response = _context4.sent;\n              // Update the table data if the request is successful\n              if (response.status === 201) {\n                this.table1.data.push({\n                  ID: response.data.id,\n                  Date: response.data.date,\n                  \"Employee Number\": response.data.numero_employer,\n                  Amount: response.data.montant,\n                  \"Cashier ID\": response.data.CaisseId,\n                  \"Payment Mode\": response.data.process // Use process instead of ModePaiementId\n                });\n                // Clear the form after adding the product\n                this.formData.date = '';\n                this.formData.employeeNumber = '';\n                this.formData.amount = '';\n                this.formData.cashierId = '';\n                this.formData.paymentModeId = '';\n              }\n              _context4.next = 10;\n              break;\n            case 7:\n              _context4.prev = 7;\n              _context4.t0 = _context4[\"catch\"](0);\n              console.error('Error adding product:', _context4.t0);\n            case 10:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this, [[0, 7]]);\n      }));\n      function submitForm() {\n        return _submitForm.apply(this, arguments);\n      }\n      return submitForm;\n    }(),\n    deleteProduct: function () {\n      var _deleteProduct = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(product) {\n        var confirmation;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              confirmation = confirm(\"Are you sure you want to delete this product?\");\n              if (!confirmation) {\n                _context5.next = 11;\n                break;\n              }\n              _context5.prev = 2;\n              _context5.next = 5;\n              return axios.delete(\"http://localhost:5000/transactionRouter/\".concat(product.ID));\n            case 5:\n              // Refresh the table after deletion\n              this.fetchProducts();\n              _context5.next = 11;\n              break;\n            case 8:\n              _context5.prev = 8;\n              _context5.t0 = _context5[\"catch\"](2);\n              console.error('Error deleting product:', _context5.t0);\n            case 11:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this, [[2, 8]]);\n      }));\n      function deleteProduct(_x) {\n        return _deleteProduct.apply(this, arguments);\n      }\n      return deleteProduct;\n    }(),\n    editProduct: function editProduct(product) {\n      // Set editFormData with the product data\n      this.editFormData = {\n        id: product.ID,\n        date: product.Date,\n        employeeNumber: product[\"Employee Number\"],\n        amount: product.Amount,\n        cashierId: product[\"Cashier ID\"],\n        paymentModeId: product[\"Payment Mode\"]\n      };\n      // Show the edit modal\n      this.$refs.editModal.show();\n    },\n    submitEditForm: function submitEditForm() {\n      var _this = this;\n      try {\n        // Send PUT request to edit the product\n        axios.put(\"http://localhost:5000/transactionRouter/\".concat(this.editFormData.id), {\n          date: this.editFormData.date,\n          numero_employer: this.editFormData.employeeNumber,\n          montant: this.editFormData.amount,\n          CaisseId: this.editFormData.cashierId,\n          ModePaiementId: this.editFormData.paymentModeId\n        }).then(function () {\n          _this.fetchProducts(); // Refresh the table after editing\n          _this.$refs.editModal.hide(); // Hide the edit modal\n        }).catch(function (error) {\n          console.error('Error editing product:', error);\n        });\n      } catch (error) {\n        console.error('Error editing product:', error);\n      }\n    }\n  }\n};",{"version":3,"names":["BCard","BCardHeader","BCardBody","BCollapse","BModal","axios","components","data","isCollapsed","formData","date","employeeNumber","amount","cashierId","paymentModeId","editFormData","id","table1","title","subTitle","columns","caisses","paymentModes","mounted","fetchProducts","fetchCaisses","fetchPaymentModes","methods","toggleCollapse","_fetchProducts","_asyncToGenerator","regeneratorRuntime","mark","_callee","response","paymentModesResponse","wrap","_callee$","_context","prev","next","get","sent","map","product","paymentMode","find","mode","ModePaiementId","paymentProcess","process","ID","Date","numero_employer","Amount","montant","CaisseId","t0","console","error","stop","apply","arguments","_fetchCaisses","_callee2","_callee2$","_context2","_fetchPaymentModes","_callee3","_callee3$","_context3","submitForm","_submitForm","_callee4","_callee4$","_context4","post","status","push","deleteProduct","_deleteProduct","_callee5","confirmation","_callee5$","_context5","confirm","delete","concat","_x","editProduct","$refs","editModal","show","submitEditForm","_this","put","then","hide","catch"],"sources":["src/pages/transactionview.vue"],"sourcesContent":["<template>\r\n  <div class=\"row\">\r\n    <div class=\"col-12\">\r\n      <!-- Collapsible form -->\r\n      <b-card>\r\n        <b-card-header id=\"formCollapseHeader\">\r\n          <h5 class=\"mb-0\">\r\n            <button class=\"btn btn-link\" type=\"button\" @click=\"toggleCollapse\">\r\n              Ajouter une nouvelle transaction\r\n              <span class=\"arrow\" :class=\"{ 'rotated': isCollapsed }\"></span>\r\n            </button>\r\n          </h5>\r\n        </b-card-header>\r\n        <b-collapse id=\"formCollapse\" v-model=\"isCollapsed\">\r\n          <b-card-body>\r\n            <form @submit.prevent=\"submitForm\" class=\"needs-validation\" novalidate>\r\n              <div class=\"form-group\">\r\n                <label for=\"date\">Date:</label>\r\n                <input v-model=\"formData.date\" type=\"date\" class=\"form-control\" id=\"date\" required>\r\n                <div class=\"invalid-feedback\">Please enter a valid date.</div>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label for=\"employeeNumber\">Employee Number:</label>\r\n                <input v-model=\"formData.employeeNumber\" type=\"number\" class=\"form-control\" id=\"employeeNumber\" placeholder=\"Enter Employee Number\" required>\r\n                <div class=\"invalid-feedback\">Please enter a valid employee number.</div>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label for=\"amount\">Montant</label>\r\n                <input v-model=\"formData.amount\" type=\"number\" class=\"form-control\" id=\"amount\" placeholder=\"Enter Amount\" required>\r\n                <div class=\"invalid-feedback\">Please enter a valid amount.</div>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label for=\"cashierId\">Cashier ID:</label>\r\n                <select v-model=\"formData.cashierId\" class=\"form-control\" id=\"cashierId\" required>\r\n                  <option v-for=\"caisse in caisses\" :value=\"caisse.id\" :key=\"caisse.id\">{{ caisse.id }}</option>\r\n                </select>\r\n                <div class=\"invalid-feedback\">Please select a cashier ID.</div>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label for=\"paymentModeId\">Payment Mode:</label>\r\n                <select v-model=\"formData.paymentModeId\" class=\"form-control\" id=\"paymentModeId\" required>\r\n                  <option value=\"\" disabled selected>Select Payment Mode</option>\r\n                  <option v-for=\"mode in paymentModes\" :key=\"mode.id\" :value=\"mode.id\">{{ mode.process }}</option>\r\n                </select>\r\n                <div class=\"invalid-feedback\">Please select a payment mode.</div>\r\n              </div>\r\n              <button type=\"submit\" class=\"btn btn-primary\">Add Product</button>\r\n            </form>\r\n          </b-card-body>\r\n        </b-collapse>\r\n      </b-card>\r\n\r\n      <!-- Bootstrap Modal for Edit -->\r\n      <b-modal ref=\"editModal\" title=\"Edit Transaction\" @ok=\"submitEditForm\">\r\n        <div>\r\n          <div class=\"form-group\">\r\n            <label for=\"editDate\">Date:</label>\r\n            <input v-model=\"editFormData.date\" type=\"date\" class=\"form-control\" id=\"editDate\" required>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"editEmployeeNumber\">Employee Number:</label>\r\n            <input v-model=\"editFormData.employeeNumber\" type=\"number\" class=\"form-control\" id=\"editEmployeeNumber\" required>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"editAmount\">Amount:</label>\r\n            <input v-model=\"editFormData.amount\" type=\"number\" class=\"form-control\" id=\"editAmount\" required>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"editCashierId\">Cashier ID:</label>\r\n            <select v-model=\"editFormData.cashierId\" class=\"form-control\" id=\"editCashierId\" required>\r\n              <option v-for=\"caisse in caisses\" :value=\"caisse.id\" :key=\"caisse.id\">{{ caisse.id }}</option>\r\n            </select>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"editPaymentModeId\">Payment Mode:</label>\r\n            <select v-model=\"editFormData.paymentModeId\" class=\"form-control\" id=\"editPaymentModeId\" required>\r\n              <option value=\"\" disabled selected>Select Payment Mode</option>\r\n              <option v-for=\"mode in paymentModes\" :key=\"mode.id\" :value=\"mode.id\">{{ mode.process }}</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </b-modal>\r\n\r\n      <!-- Your existing card -->\r\n      <card :title=\"table1.title\" :subTitle=\"table1.subTitle\">\r\n        <div slot=\"raw-content\" class=\"table-responsive\">\r\n          <table class=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th v-for=\"column in table1.columns\" :key=\"column\">{{ column }}</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr v-for=\"(item, index) in table1.data\" :key=\"index\">\r\n                <td v-for=\"(value, key) in item\" :key=\"key\">{{ value }}</td>\r\n                <td>\r\n                  <button class=\"btn btn-danger\" @click=\"deleteProduct(item)\">Delete</button>\r\n                  <button class=\"btn btn-warning\" @click=\"editProduct(item)\">Edit</button>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </card>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { BCard, BCardHeader, BCardBody, BCollapse, BModal } from 'bootstrap-vue';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  components: {\r\n    BCard,\r\n    BCardHeader,\r\n    BCardBody,\r\n    BCollapse,\r\n    BModal,\r\n  },\r\n  data() {\r\n    return {\r\n      isCollapsed: false,\r\n      formData: {\r\n        date: '',\r\n        employeeNumber: '',\r\n        amount: '',\r\n        cashierId: '',\r\n        paymentModeId: ''\r\n      },\r\n      editFormData: {\r\n        id: '',\r\n        date: '',\r\n        employeeNumber: '',\r\n        amount: '',\r\n        cashierId: '',\r\n        paymentModeId: ''\r\n      },\r\n      table1: {\r\n        title: \"Table des transactions\",\r\n        subTitle: \"transactions\",\r\n        columns: [\"ID\", \"Date\", \"Employee Number\", \"Amount\", \"Cashier ID\", \"Payment Mode\"],\r\n        data: [] // Initialize as empty array\r\n      },\r\n      caisses: [], // Initialize caisses array\r\n      paymentModes: [] // Initialize paymentModes array\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchProducts();\r\n    this.fetchCaisses();\r\n    this.fetchPaymentModes();\r\n  },\r\n  methods: {\r\n    toggleCollapse() {\r\n      this.isCollapsed = !this.isCollapsed;\r\n    },\r\n    async fetchProducts() {\r\n      try {\r\n        // Fetch products from your server-side endpoint\r\n        const response = await axios.get('http://localhost:5000/transactionRouter');\r\n        // Fetch payment modes from your server-side endpoint\r\n        const paymentModesResponse = await axios.get('http://localhost:5000/modePaiementRouter');\r\n        const paymentModes = paymentModesResponse.data.data;\r\n\r\n        // Map fetched data to match the table structure\r\n        this.table1.data = response.data.data.map(product => {\r\n          // Find the corresponding payment mode for the current product's ModePaiementId\r\n          const paymentMode = paymentModes.find(mode => mode.id === product.ModePaiementId);\r\n          // If a payment mode is found, use its process value; otherwise, use an empty string\r\n          const paymentProcess = paymentMode ? paymentMode.process : '';\r\n\r\n          return {\r\n            ID: product.id,\r\n            Date: product.date,\r\n            \"Employee Number\": product.numero_employer,\r\n            Amount: product.montant,\r\n            \"Cashier ID\": product.CaisseId,\r\n            \"Payment Mode\": paymentProcess\r\n          };\r\n        });\r\n      } catch (error) {\r\n        console.error('Error fetching products:', error);\r\n      }\r\n    },\r\n    async fetchCaisses() {\r\n      try {\r\n        // Fetch caisses from your server-side endpoint\r\n        const response = await axios.get('http://localhost:5000/caisse');\r\n        this.caisses = response.data.data;\r\n      } catch (error) {\r\n        console.error('Error fetching caisses:', error);\r\n      }\r\n    },\r\n    async fetchPaymentModes() {\r\n      try {\r\n        // Fetch payment modes from your server-side endpoint\r\n        const response = await axios.get('http://localhost:5000/modePaiementRouter');\r\n        this.paymentModes = response.data.data;\r\n      } catch (error) {\r\n        console.error('Error fetching payment modes:', error);\r\n      }\r\n    },\r\n    async submitForm() {\r\n      try {\r\n        // Send POST request to add a new product\r\n        const response = await axios.post('http://localhost:5000/transactionRouter', {\r\n          date: this.formData.date,\r\n          numero_employer: this.formData.employeeNumber,\r\n          montant: this.formData.amount,\r\n          CaisseId: this.formData.cashierId,\r\n          ModePaiementId: this.formData.paymentModeId\r\n        });\r\n        // Update the table data if the request is successful\r\n        if (response.status === 201) {\r\n          this.table1.data.push({\r\n            ID: response.data.id,\r\n            Date: response.data.date,\r\n            \"Employee Number\": response.data.numero_employer,\r\n            Amount: response.data.montant,\r\n            \"Cashier ID\": response.data.CaisseId,\r\n            \"Payment Mode\": response.data.process // Use process instead of ModePaiementId\r\n          });\r\n          // Clear the form after adding the product\r\n          this.formData.date = '';\r\n          this.formData.employeeNumber = '';\r\n          this.formData.amount = '';\r\n          this.formData.cashierId = '';\r\n          this.formData.paymentModeId = '';\r\n        }\r\n      } catch (error) {\r\n        console.error('Error adding product:', error);\r\n      }\r\n    },\r\n    async deleteProduct(product) {\r\n      const confirmation = confirm(\"Are you sure you want to delete this product?\");\r\n      if (confirmation) {\r\n        try {\r\n          // Send DELETE request to delete the product\r\n          await axios.delete(`http://localhost:5000/transactionRouter/${product.ID}`);\r\n          // Refresh the table after deletion\r\n          this.fetchProducts();\r\n        } catch (error) {\r\n          console.error('Error deleting product:', error);\r\n        }\r\n      }\r\n    },\r\n    editProduct(product) {\r\n      // Set editFormData with the product data\r\n      this.editFormData = {\r\n        id: product.ID,\r\n        date: product.Date,\r\n        employeeNumber: product[\"Employee Number\"],\r\n        amount: product.Amount,\r\n        cashierId: product[\"Cashier ID\"],\r\n        paymentModeId: product[\"Payment Mode\"]\r\n      };\r\n      // Show the edit modal\r\n      this.$refs.editModal.show();\r\n    },\r\n    submitEditForm() {\r\n      try {\r\n        // Send PUT request to edit the product\r\n        axios.put(`http://localhost:5000/transactionRouter/${this.editFormData.id}`, {\r\n          date: this.editFormData.date,\r\n          numero_employer: this.editFormData.employeeNumber,\r\n          montant: this.editFormData.amount,\r\n          CaisseId: this.editFormData.cashierId,\r\n          ModePaiementId: this.editFormData.paymentModeId\r\n        })\r\n        .then(() => {\r\n          this.fetchProducts(); // Refresh the table after editing\r\n          this.$refs.editModal.hide(); // Hide the edit modal\r\n        })\r\n        .catch(error => {\r\n          console.error('Error editing product:', error);\r\n        });\r\n      } catch (error) {\r\n        console.error('Error editing product:', error);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Styling for the arrow */\r\n.arrow {\r\n  display: inline-block;\r\n  width: 0;\r\n  height: 0;\r\n  vertical-align: middle;\r\n  border: solid;\r\n  border-width: 0.2em 0.2em 0 0.2em;\r\n  border-color: #000000;\r\n  transition: transform 0.3s;\r\n}\r\n\r\n/* Styling for the arrow when the form is collapsed */\r\n.rotated {\r\n  transform: rotate(-90deg);\r\n}\r\n.card .card-body {\r\n  padding: 15px 15px 20px 15px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]}]}