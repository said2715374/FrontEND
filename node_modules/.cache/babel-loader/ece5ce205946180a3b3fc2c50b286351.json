{"remainingRequest":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\user\\Desktop\\serveurr\\vue_js\\src\\pages\\regionvue.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\src\\pages\\regionvue.vue","mtime":1713232123788},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\.babelrc","mtime":1713232126048},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1713232209249},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\babel-loader\\lib\\index.js","mtime":1713232210282},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1713232209249},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\vue-loader\\lib\\index.js","mtime":1713232211778}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:/Users/user/Desktop/serveurr/vue_js/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BCard, BCardHeader, BCardBody, BCollapse } from 'bootstrap-vue';\nimport axios from 'axios';\nexport default {\n  components: {\n    BCard: BCard,\n    BCardHeader: BCardHeader,\n    BCardBody: BCardBody,\n    BCollapse: BCollapse\n  },\n  data: function data() {\n    return {\n      isCollapsed: false,\n      formData: {\n        province: ''\n      },\n      table1: {\n        title: \"Table des régions\",\n        subTitle: \"régions\",\n        columns: [\"Id\", \"province\"],\n        data: [] // Initialize as empty array\n      }\n    };\n  },\n  mounted: function mounted() {\n    this.fetchRoles(); // Fetch roles when the component is mounted\n  },\n  methods: {\n    toggleCollapse: function toggleCollapse() {\n      this.isCollapsed = !this.isCollapsed;\n    },\n    fetchRoles: function () {\n      var _fetchRoles = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var response;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return axios.get('http://localhost:5000/RegionRoute/regions');\n            case 3:\n              response = _context.sent;\n              // Map fetched data to match the table structure\n              this.table1.data = response.data.map(function (role) {\n                return {\n                  Id: role.id,\n                  province: role.province\n                };\n              });\n              _context.next = 10;\n              break;\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.error('Error fetching roles:', _context.t0);\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[0, 7]]);\n      }));\n      function fetchRoles() {\n        return _fetchRoles.apply(this, arguments);\n      }\n      return fetchRoles;\n    }(),\n    submitForm: function () {\n      var _submitForm = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var response;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return axios.post('http://localhost:5000/RegionRoute/regions', {\n                province: this.formData.province\n              });\n            case 3:\n              response = _context2.sent;\n              // Update the table data if the request is successful\n              if (response.status === 201) {\n                this.table1.data.push({\n                  Id: response.data.id,\n                  province: response.data.province\n                });\n                // Clear the form after adding the role\n                this.formData.province = '';\n              }\n              _context2.next = 10;\n              break;\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error('Error adding province:', _context2.t0);\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[0, 7]]);\n      }));\n      function submitForm() {\n        return _submitForm.apply(this, arguments);\n      }\n      return submitForm;\n    }(),\n    deleteRole: function deleteRole(role) {\n      var _this = this;\n      var confirmation = confirm(\"Are you sure you want to delete this role?\");\n      if (confirmation) {\n        axios.delete(\"http://localhost:5000/RegionRoute/regions/\".concat(role.Id)).then(function () {\n          _this.fetchRoles(); // Refresh the table after deletion\n        }).catch(function (error) {\n          console.error('Error deleting role:', error);\n        });\n      }\n    },\n    editRole: function editRole(role) {\n      var _this2 = this;\n      var newRoleName = prompt(\"Enter the new role name:\", role.province);\n      if (newRoleName !== null) {\n        axios.put(\"http://localhost:5000/RegionRoute/regions/\".concat(role.Id), {\n          province: newRoleName\n        }).then(function () {\n          _this2.fetchRoles(); // Refresh the table after editing\n        }).catch(function (error) {\n          console.error('Error editing role:', error);\n        });\n      }\n    }\n  }\n};",{"version":3,"names":["BCard","BCardHeader","BCardBody","BCollapse","axios","components","data","isCollapsed","formData","province","table1","title","subTitle","columns","mounted","fetchRoles","methods","toggleCollapse","_fetchRoles","_asyncToGenerator","regeneratorRuntime","mark","_callee","response","wrap","_callee$","_context","prev","next","get","sent","map","role","Id","id","t0","console","error","stop","apply","arguments","submitForm","_submitForm","_callee2","_callee2$","_context2","post","status","push","deleteRole","_this","confirmation","confirm","delete","concat","then","catch","editRole","_this2","newRoleName","prompt","put"],"sources":["src/pages/regionvue.vue"],"sourcesContent":["<template>\r\n  <div class=\"row\">\r\n    <div class=\"col-12\">\r\n      <!-- Collapsible form -->\r\n      <b-card>\r\n        <b-card-header id=\"formCollapseHeader\">\r\n          <h5 class=\"mb-0\">\r\n            <button class=\"btn btn-link\" type=\"button\" @click=\"toggleCollapse\">\r\n              Ajouter une nouvelle province\r\n              <span class=\"arrow\" :class=\"{ 'rotated': isCollapsed }\"></span>\r\n            </button>\r\n          </h5>\r\n        </b-card-header>\r\n\r\n        <b-collapse id=\"formCollapse\" v-model=\"isCollapsed\">\r\n          <b-card-body>\r\n            <form @submit.prevent=\"submitForm\">\r\n              <div class=\"form-group\">\r\n                <input v-model=\"formData.province\" type=\"text\" class=\"form-control\" id=\"province\" placeholder=\"province name\" required>\r\n              </div>\r\n              <button type=\"submit\" class=\"btn btn-primary\">Ajouter province</button>\r\n            </form>\r\n          </b-card-body>\r\n        </b-collapse>\r\n      </b-card>\r\n      \r\n      <!-- Your existing card -->\r\n      <card :title=\"table1.title\" :subTitle=\"table1.subTitle\">\r\n        <div slot=\"raw-content\" class=\"table-responsive\">\r\n          <table class=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th v-for=\"column in table1.columns\" :key=\"column\">{{ column }}</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr v-for=\"(item, index) in table1.data\" :key=\"index\">\r\n                <td v-for=\"(value, key) in item\" :key=\"key\">{{ value }}</td>\r\n                <td>\r\n                  <button class=\"btn btn-danger\" @click=\"deleteRole(item)\">Supprimer</button>\r\n                  <button class=\"btn btn-warning\" @click=\"editRole(item)\">Modifier</button>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </card>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { BCard, BCardHeader, BCardBody, BCollapse } from 'bootstrap-vue';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  components: {\r\n    BCard,\r\n    BCardHeader,\r\n    BCardBody,\r\n    BCollapse,\r\n  },\r\n  data() {\r\n    return {\r\n      isCollapsed: false,\r\n      formData: {\r\n        province: ''\r\n      },\r\n      table1: {\r\n        title: \"Table des régions\",\r\n        subTitle: \"régions\",\r\n        columns: [\"Id\", \"province\"],\r\n        data: [] // Initialize as empty array\r\n      }\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchRoles(); // Fetch roles when the component is mounted\r\n  },\r\n  methods: {\r\n    toggleCollapse() {\r\n      this.isCollapsed = !this.isCollapsed;\r\n    },\r\n    async fetchRoles() {\r\n      try {\r\n        // Fetch roles from your server-side endpoint\r\n        const response = await axios.get('http://localhost:5000/RegionRoute/regions');\r\n        // Map fetched data to match the table structure\r\n        this.table1.data = response.data.map(role => ({\r\n          Id: role.id,\r\n          province: role.province\r\n        }));\r\n      } catch (error) {\r\n        console.error('Error fetching roles:', error);\r\n      }\r\n    },\r\n    async submitForm() {\r\n      try {\r\n        // Send POST request to add a new role\r\n        const response = await axios.post('http://localhost:5000/RegionRoute/regions', {\r\n          province: this.formData.province\r\n        });\r\n        // Update the table data if the request is successful\r\n        if (response.status === 201) {\r\n          this.table1.data.push({\r\n            Id: response.data.id,\r\n            province: response.data.province\r\n          });\r\n          // Clear the form after adding the role\r\n          this.formData.province = '';\r\n        }\r\n      } catch (error) {\r\n        console.error('Error adding province:', error);\r\n      }\r\n    },\r\n    deleteRole(role) {\r\n      const confirmation = confirm(\"Are you sure you want to delete this role?\");\r\n      if (confirmation) {\r\n        axios.delete(`http://localhost:5000/RegionRoute/regions/${role.Id}`)\r\n          .then(() => {\r\n            this.fetchRoles(); // Refresh the table after deletion\r\n          })\r\n          .catch(error => {\r\n            console.error('Error deleting role:', error);\r\n          });\r\n      }\r\n    },\r\n    editRole(role) {\r\n      const newRoleName = prompt(\"Enter the new role name:\", role.province);\r\n      if (newRoleName !== null) {\r\n        axios.put(`http://localhost:5000/RegionRoute/regions/${role.Id}`, { province: newRoleName })\r\n          .then(() => {\r\n            this.fetchRoles(); // Refresh the table after editing\r\n          })\r\n          .catch(error => {\r\n            console.error('Error editing role:', error);\r\n          });\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Styling for the arrow */\r\n.arrow {\r\n  display: inline-block;\r\n  width: 0;\r\n  height: 0;\r\n  vertical-align: middle;\r\n  border: solid;\r\n  border-width: 0.2em 0.2em 0 0.2em;\r\n  border-color: #000000;\r\n  transition: transform 0.3s;\r\n}\r\n\r\n/* Styling for the arrow when the form is collapsed */\r\n.rotated {\r\n  transform: rotate(-90deg);\r\n}\r\n.card .card-body {\r\n    padding: 15px 15px 20px 15px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]}]}