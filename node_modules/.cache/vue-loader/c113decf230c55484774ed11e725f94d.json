{"remainingRequest":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\user\\Desktop\\serveurr\\vue_js\\src\\pages\\productsview.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\src\\pages\\productsview.vue","mtime":1713232123647},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1713232209249},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\babel-loader\\lib\\index.js","mtime":1713232210282},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1713232209249},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\vue-loader\\lib\\index.js","mtime":1713232211778}],"contextDependencies":[],"result":["\r\nimport { BCard, BCardHeader, BCardBody, BCollapse, BModal } from 'bootstrap-vue';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  components: {\r\n    BCard,\r\n    BCardHeader,\r\n    BCardBody,\r\n    BCollapse,\r\n    BModal,\r\n  },\r\n  data() {\r\n    return {\r\n      isCollapsed: false,\r\n      formData: {\r\n        name: '',\r\n        entryDate: '',\r\n        expirationDate: '',\r\n        quantity: '',\r\n        price: '',\r\n        MagasinId: ''\r\n      },\r\n      editFormData: {\r\n        name: '',\r\n        entryDate: '',\r\n        expirationDate: '',\r\n        quantity: '',\r\n        price: '',\r\n        MagasinId: ''\r\n      },\r\n      table1: {\r\n        title: \"Table des produits\",\r\n        subTitle: \"produits\",\r\n        columns: [\"ID\", \"Name\", \"Entry Date\", \"Expiration Date\", \"Quantity\", \"Price\", \"Store ID\"],\r\n        data: [] // Initialize as an empty array\r\n      },\r\n      stores: [] // Initialize stores array\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchRoles(); // Fetch roles when the component is mounted\r\n    this.fetchStores(); // Fetch stores when the component is mounted\r\n  },\r\n  methods: {\r\n    toggleCollapse() {\r\n      this.isCollapsed = !this.isCollapsed;\r\n    },\r\n    async fetchRoles() {\r\n      try {\r\n        // Fetch products from your server-side endpoint\r\n        const response = await axios.get('http://localhost:5000/produitRouter/produits');\r\n        // Map fetched data to match the table structure and format dates\r\n        this.table1.data = response.data.data.map(product => ({\r\n          ID: product.id,\r\n          Name: product.nom,\r\n          \"Entry Date\": this.formatDate(product.dateEntree),\r\n          \"Expiration Date\": this.formatDate(product.dateExpiration),\r\n          Quantity: product.quantite,\r\n          Price: product.prix,\r\n          \"Store ID\": product.MagasinId\r\n        }));\r\n      } catch (error) {\r\n        console.error('Error fetching products:', error);\r\n      }\r\n    },\r\n    async fetchStores() {\r\n      try {\r\n        // Fetch stores from your server-side endpoint\r\n        const response = await axios.get('http://localhost:5000/magasinRouter');\r\n        this.stores = response.data.data;\r\n      } catch (error) {\r\n        console.error('Error fetching stores:', error);\r\n      }\r\n    },\r\n    async submitForm() {\r\n      try {\r\n        // Send POST request to add a new product\r\n        const response = await axios.post('http://localhost:5000/produitRouter/produits', {\r\n          nom: this.formData.name,\r\n          dateEntree: this.formData.entryDate,\r\n          dateExpiration: this.formData.expirationDate,\r\n          quantite: this.formData.quantity,\r\n          prix: this.formData.price,\r\n          MagasinId: this.formData.MagasinId // Include MagasinId in the request\r\n        });\r\n        // Update the table data if the request is successful\r\n        if (response.status === 201) {\r\n          this.table1.data.push({\r\n            ID: response.data.id,\r\n            Name: response.data.nom,\r\n            \"Entry Date\": this.formatDate(response.data.dateEntree),\r\n            \"Expiration Date\": this.formatDate(response.data.dateExpiration),\r\n            Quantity: response.data.quantite,\r\n            Price: response.data.prix,\r\n            \"Store ID\": response.data.MagasinId\r\n          });\r\n          // Clear the form after adding the product\r\n          await this.fetchRoles();\r\n          this.formData.name = '';\r\n          this.formData.entryDate = '';\r\n          this.formData.expirationDate = '';\r\n          this.formData.quantity = '';\r\n          this.formData.price = '';\r\n          this.formData.MagasinId = ''; // Reset MagasinId after submission\r\n        }\r\n      } catch (error) {\r\n        console.error('Error adding product:', error);\r\n      }\r\n    },\r\n    formatDate(dateString) {\r\n      // Parse the date string into a Date object\r\n      const date = new Date(dateString);\r\n      // Format the date as desired (e.g., MM/DD/YYYY)\r\n      const formattedDate = `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;\r\n      return formattedDate;\r\n    },\r\n    deleteRole(role) {\r\n      const confirmation = confirm(\"Are you sure you want to delete this role?\");\r\n      if (confirmation) {\r\n        axios.delete(`http://localhost:5000/produitRouter/produits/${role.ID}`)\r\n          .then(() => {\r\n            this.fetchRoles(); // Refresh the table after deletion\r\n          })\r\n          .catch(error => {\r\n            console.error('Error deleting role:', error);\r\n          });\r\n      }\r\n    },\r\n    editRole(role) {\r\n      // Set editFormData with the role data\r\n      this.editFormData = {\r\n        ID: role.ID,\r\n        name: role.Name,\r\n        entryDate: role[\"Entry Date\"],\r\n        expirationDate: role[\"Expiration Date\"],\r\n        quantity: role.Quantity,\r\n        price: role.Price,\r\n        MagasinId: role[\"Store ID\"]\r\n      };\r\n      // Show the edit modal\r\n      this.$refs.editModal.show();\r\n    },\r\n    submitEditForm() {\r\n  try {\r\n    // Send PUT request to update the product\r\n    axios.put(`http://localhost:5000/produitRouter/produits/${this.editFormData.ID}`, {\r\n      nom: this.editFormData.name,\r\n      dateEntree: this.editFormData.entryDate,\r\n      dateExpiration: this.editFormData.expirationDate,\r\n      quantite: this.editFormData.quantity,\r\n      prix: this.editFormData.price,\r\n      MagasinId: this.editFormData.MagasinId\r\n    })\r\n    .then(() => {\r\n      // Find the index of the edited product in the table data\r\n      const index = this.table1.data.findIndex(item => item.ID === this.editFormData.ID);\r\n      // If the index is found, update the product data\r\n      if (index !== -1) {\r\n        \r\n        this.table1.data[index].Name = this.editFormData.name;\r\n        this.table1.data[index][\"Entry Date\"] = this.editFormData.entryDate;\r\n        this.table1.data[index][\"Expiration Date\"] = this.editFormData.expirationDate;\r\n        this.table1.data[index].Quantity = this.editFormData.quantity;\r\n        this.table1.data[index].Price = this.editFormData.price;\r\n        this.table1.data[index][\"Store ID\"] = this.editFormData.MagasinId;\r\n        \r\n      }\r\n      this.$refs.editModal.hide(); \r\n    })\r\n    .catch(error => {\r\n      console.error('Error editing product:', error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error editing product:', error);\r\n  }\r\n}\r\n    \r\n\r\n\r\n  }\r\n};\r\n",{"version":3,"sources":["productsview.vue"],"names":[],"mappingsfile":"productsview.vue","sourceRoot":"src/pages","sourcesContent":["<template>\r\n  <div class=\"row\">\r\n    <div class=\"col-12\">\r\n      <!-- Collapsible form -->\r\n      <b-card>\r\n        <b-card-header id=\"formCollapseHeader\">\r\n          <h5 class=\"mb-0\">\r\n            <button class=\"btn btn-link\" type=\"button\" @click=\"toggleCollapse\">\r\n              Ajouter un produit\r\n              <span class=\"arrow\" :class=\"{ 'rotated': isCollapsed }\"></span>\r\n            </button>\r\n          </h5>\r\n        </b-card-header>\r\n\r\n        <b-collapse id=\"formCollapse\" v-model=\"isCollapsed\">\r\n          <b-card-body>\r\n            <form @submit.prevent=\"submitForm\">\r\n              <div class=\"form-group\">\r\n                <label for=\"productName\">Nom du produit:</label>\r\n                <input v-model=\"formData.name\" type=\"text\" class=\"form-control\" id=\"productName\" placeholder=\"Enter nom de produit\" required>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label for=\"entryDate\">Entry Date:</label>\r\n                <input v-model=\"formData.entryDate\" type=\"date\" class=\"form-control\" id=\"entryDate\" required>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label for=\"expirationDate\">Expiration Date:</label>\r\n                <input v-model=\"formData.expirationDate\" type=\"date\" class=\"form-control\" id=\"expirationDate\" required>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label for=\"quantity\">Quantity:</label>\r\n                <input v-model=\"formData.quantity\" type=\"number\" class=\"form-control\" id=\"quantity\" placeholder=\"Enter Quantity\" required>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label for=\"price\">Prix:</label>\r\n                <input v-model=\"formData.price\" type=\"number\" class=\"form-control\" id=\"prix\" placeholder=\"Enter Prix\" required>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label for=\"MagasinId\">magasin ID:</label>\r\n                <select v-model=\"formData.MagasinId\" class=\"form-control\" id=\"MagasinId\" required>\r\n                  <option v-for=\"store in stores\" :value=\"store.id\" :key=\"store.id\">{{ store.id }}</option>\r\n                </select>\r\n              </div>\r\n              <button type=\"submit\" class=\"btn btn-primary\">Ajouter un produit</button>\r\n            </form>\r\n          </b-card-body>\r\n        </b-collapse>\r\n      </b-card>\r\n\r\n      <!-- Bootstrap Modal for Edit -->\r\n      <b-modal ref=\"editModal\" title=\"Edit Product\" @ok=\"submitEditForm\">\r\n        <div>\r\n          <div class=\"form-group\">\r\n            <label for=\"editProductName\">Nom du produit:</label>\r\n            <input v-model=\"editFormData.name\" type=\"text\" class=\"form-control\" id=\"editProductName\" required>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"editEntryDate\">Entry Date:</label>\r\n            <input v-model=\"editFormData.entryDate\" type=\"date\" class=\"form-control\" id=\"editEntryDate\" required>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"editExpirationDate\">Expiration Date:</label>\r\n            <input v-model=\"editFormData.expirationDate\" type=\"date\" class=\"form-control\" id=\"editExpirationDate\" required>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"editQuantity\">Quantity:</label>\r\n            <input v-model=\"editFormData.quantity\" type=\"number\" class=\"form-control\" id=\"editQuantity\" required>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"editPrice\">Price:</label>\r\n            <input v-model=\"editFormData.price\" type=\"number\" class=\"form-control\" id=\"editPrice\" required>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"editMagasinId\">magasin ID:</label>\r\n            <select v-model=\"editFormData.MagasinId\" class=\"form-control\" id=\"editMagasinId\" required>\r\n              <option v-for=\"store in stores\" :value=\"store.id\" :key=\"store.id\">{{ store.id }}</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </b-modal>\r\n\r\n      <!-- Your existing card -->\r\n      <card :title=\"table1.title\" :subTitle=\"table1.subTitle\">\r\n        <div slot=\"raw-content\" class=\"table-responsive\">\r\n          <table class=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th v-for=\"column in table1.columns\" :key=\"column\">{{ column }}</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr v-for=\"(item, index) in table1.data\" :key=\"index\">\r\n                <td v-for=\"(value, key) in item\" :key=\"key\">{{ value }}</td>\r\n                <td>\r\n                  <button class=\"btn btn-danger\" @click=\"deleteRole(item)\">Delete</button>\r\n                  <button class=\"btn btn-warning\" @click=\"editRole(item)\">Edit</button>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </card>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { BCard, BCardHeader, BCardBody, BCollapse, BModal } from 'bootstrap-vue';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  components: {\r\n    BCard,\r\n    BCardHeader,\r\n    BCardBody,\r\n    BCollapse,\r\n    BModal,\r\n  },\r\n  data() {\r\n    return {\r\n      isCollapsed: false,\r\n      formData: {\r\n        name: '',\r\n        entryDate: '',\r\n        expirationDate: '',\r\n        quantity: '',\r\n        price: '',\r\n        MagasinId: ''\r\n      },\r\n      editFormData: {\r\n        name: '',\r\n        entryDate: '',\r\n        expirationDate: '',\r\n        quantity: '',\r\n        price: '',\r\n        MagasinId: ''\r\n      },\r\n      table1: {\r\n        title: \"Table des produits\",\r\n        subTitle: \"produits\",\r\n        columns: [\"ID\", \"Name\", \"Entry Date\", \"Expiration Date\", \"Quantity\", \"Price\", \"Store ID\"],\r\n        data: [] // Initialize as an empty array\r\n      },\r\n      stores: [] // Initialize stores array\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchRoles(); // Fetch roles when the component is mounted\r\n    this.fetchStores(); // Fetch stores when the component is mounted\r\n  },\r\n  methods: {\r\n    toggleCollapse() {\r\n      this.isCollapsed = !this.isCollapsed;\r\n    },\r\n    async fetchRoles() {\r\n      try {\r\n        // Fetch products from your server-side endpoint\r\n        const response = await axios.get('http://localhost:5000/produitRouter/produits');\r\n        // Map fetched data to match the table structure and format dates\r\n        this.table1.data = response.data.data.map(product => ({\r\n          ID: product.id,\r\n          Name: product.nom,\r\n          \"Entry Date\": this.formatDate(product.dateEntree),\r\n          \"Expiration Date\": this.formatDate(product.dateExpiration),\r\n          Quantity: product.quantite,\r\n          Price: product.prix,\r\n          \"Store ID\": product.MagasinId\r\n        }));\r\n      } catch (error) {\r\n        console.error('Error fetching products:', error);\r\n      }\r\n    },\r\n    async fetchStores() {\r\n      try {\r\n        // Fetch stores from your server-side endpoint\r\n        const response = await axios.get('http://localhost:5000/magasinRouter');\r\n        this.stores = response.data.data;\r\n      } catch (error) {\r\n        console.error('Error fetching stores:', error);\r\n      }\r\n    },\r\n    async submitForm() {\r\n      try {\r\n        // Send POST request to add a new product\r\n        const response = await axios.post('http://localhost:5000/produitRouter/produits', {\r\n          nom: this.formData.name,\r\n          dateEntree: this.formData.entryDate,\r\n          dateExpiration: this.formData.expirationDate,\r\n          quantite: this.formData.quantity,\r\n          prix: this.formData.price,\r\n          MagasinId: this.formData.MagasinId // Include MagasinId in the request\r\n        });\r\n        // Update the table data if the request is successful\r\n        if (response.status === 201) {\r\n          this.table1.data.push({\r\n            ID: response.data.id,\r\n            Name: response.data.nom,\r\n            \"Entry Date\": this.formatDate(response.data.dateEntree),\r\n            \"Expiration Date\": this.formatDate(response.data.dateExpiration),\r\n            Quantity: response.data.quantite,\r\n            Price: response.data.prix,\r\n            \"Store ID\": response.data.MagasinId\r\n          });\r\n          // Clear the form after adding the product\r\n          await this.fetchRoles();\r\n          this.formData.name = '';\r\n          this.formData.entryDate = '';\r\n          this.formData.expirationDate = '';\r\n          this.formData.quantity = '';\r\n          this.formData.price = '';\r\n          this.formData.MagasinId = ''; // Reset MagasinId after submission\r\n        }\r\n      } catch (error) {\r\n        console.error('Error adding product:', error);\r\n      }\r\n    },\r\n    formatDate(dateString) {\r\n      // Parse the date string into a Date object\r\n      const date = new Date(dateString);\r\n      // Format the date as desired (e.g., MM/DD/YYYY)\r\n      const formattedDate = `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;\r\n      return formattedDate;\r\n    },\r\n    deleteRole(role) {\r\n      const confirmation = confirm(\"Are you sure you want to delete this role?\");\r\n      if (confirmation) {\r\n        axios.delete(`http://localhost:5000/produitRouter/produits/${role.ID}`)\r\n          .then(() => {\r\n            this.fetchRoles(); // Refresh the table after deletion\r\n          })\r\n          .catch(error => {\r\n            console.error('Error deleting role:', error);\r\n          });\r\n      }\r\n    },\r\n    editRole(role) {\r\n      // Set editFormData with the role data\r\n      this.editFormData = {\r\n        ID: role.ID,\r\n        name: role.Name,\r\n        entryDate: role[\"Entry Date\"],\r\n        expirationDate: role[\"Expiration Date\"],\r\n        quantity: role.Quantity,\r\n        price: role.Price,\r\n        MagasinId: role[\"Store ID\"]\r\n      };\r\n      // Show the edit modal\r\n      this.$refs.editModal.show();\r\n    },\r\n    submitEditForm() {\r\n  try {\r\n    // Send PUT request to update the product\r\n    axios.put(`http://localhost:5000/produitRouter/produits/${this.editFormData.ID}`, {\r\n      nom: this.editFormData.name,\r\n      dateEntree: this.editFormData.entryDate,\r\n      dateExpiration: this.editFormData.expirationDate,\r\n      quantite: this.editFormData.quantity,\r\n      prix: this.editFormData.price,\r\n      MagasinId: this.editFormData.MagasinId\r\n    })\r\n    .then(() => {\r\n      // Find the index of the edited product in the table data\r\n      const index = this.table1.data.findIndex(item => item.ID === this.editFormData.ID);\r\n      // If the index is found, update the product data\r\n      if (index !== -1) {\r\n        \r\n        this.table1.data[index].Name = this.editFormData.name;\r\n        this.table1.data[index][\"Entry Date\"] = this.editFormData.entryDate;\r\n        this.table1.data[index][\"Expiration Date\"] = this.editFormData.expirationDate;\r\n        this.table1.data[index].Quantity = this.editFormData.quantity;\r\n        this.table1.data[index].Price = this.editFormData.price;\r\n        this.table1.data[index][\"Store ID\"] = this.editFormData.MagasinId;\r\n        \r\n      }\r\n      this.$refs.editModal.hide(); \r\n    })\r\n    .catch(error => {\r\n      console.error('Error editing product:', error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error editing product:', error);\r\n  }\r\n}\r\n    \r\n\r\n\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Styling for the arrow */\r\n.arrow {\r\n  display: inline-block;\r\n  width: 0;\r\n  height: 0;\r\n  vertical-align: middle;\r\n  border: solid;\r\n  border-width: 0.2em 0.2em 0 0.2em;\r\n  border-color: #000000;\r\n  transition: transform 0.3s;\r\n}\r\n\r\n/* Styling for the arrow when the form is collapsed */\r\n.rotated {\r\n  transform: rotate(-90deg);\r\n}\r\n\r\n.card .card-body {\r\n  padding: 15px 15px 20px 15px;\r\n}\r\n</style>\r\n"]}]}