{"remainingRequest":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\user\\Desktop\\serveurr\\vue_js\\src\\pages\\Roles.vue?vue&type=style&index=0&id=de035f6e&scoped=true&lang=css","dependencies":[{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\src\\pages\\Roles.vue","mtime":1713232124120},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\css-loader\\index.js","mtime":1713232207389},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1713232213363},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1713232209249},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\vue-loader\\lib\\index.js","mtime":1713232211778}],"contextDependencies":[],"result":["\n/* Styling for the arrow */\n.arrow {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  vertical-align: middle;\n  border: solid;\n  border-width: 0.2em 0.2em 0 0.2em;\n  border-color: #000000;\n  transition: transform 0.3s;\n}\n\n/* Styling for the arrow when the form is collapsed */\n.rotated {\n  transform: rotate(-90deg);\n}\n.card .card-body {\n    padding: 15px 15px 20px 15px;\n}\n",{"version":3,"sources":["Roles.vue"],"names":[],"mappings":";AAoLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Roles.vue","sourceRoot":"src/pages","sourcesContent":["<template>\n  <div class=\"row\">\n    <div class=\"col-12\">\n      <!-- Collapsible form -->\n      <b-card>\n        <b-card-header id=\"formCollapseHeader\">\n          <h5 class=\"mb-0\">\n            <button class=\"btn btn-link\" type=\"button\" @click=\"toggleCollapse\">\n              Ajouter un nouveau rôle\n              <span class=\"arrow\" :class=\"{ 'rotated': isCollapsed }\"></span>\n            </button>\n          </h5>\n        </b-card-header>\n\n        <b-collapse id=\"formCollapse\" v-model=\"isCollapsed\">\n          <b-card-body>\n            <form @submit.prevent=\"submitForm\">\n              <div class=\"form-group\">\n                <input v-model=\"formData.role\" type=\"text\" class=\"form-control\" id=\"role\" placeholder=\"Role Nom\" required>\n              </div>\n              <button type=\"submit\" class=\"btn btn-primary\">Ajouter</button>\n            </form>\n          </b-card-body>\n        </b-collapse>\n      </b-card>\n\n      <!-- Bootstrap Modal for Edit -->\n      <b-modal ref=\"editModal\" title=\"Edit Role\" @ok=\"submitEditForm\">\n        <div>\n          <div class=\"form-group\">\n            <label for=\"editRoleName\">Role Name:</label>\n            <input v-model=\"editFormData.role\" type=\"text\" class=\"form-control\" id=\"editRoleName\" required>\n          </div>\n        </div>\n      </b-modal>\n\n      <!-- Your existing card -->\n      <card :title=\"table1.title\" :subTitle=\"table1.subTitle\">\n        <div slot=\"raw-content\" class=\"table-responsive\">\n          <table class=\"table\">\n            <thead>\n              <tr>\n                <th v-for=\"column in table1.columns\" :key=\"column\">{{ column }}</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"(item, index) in table1.data\" :key=\"index\">\n                <td v-for=\"(value, key) in item\" :key=\"key\">{{ value }}</td>\n                <td>\n                  <button class=\"btn btn-danger\" @click=\"deleteRole(item)\">Supprimer</button>\n                  <button class=\"btn btn-warning\" @click=\"openEditModal(item)\">Modifier</button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </card>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { BCard, BCardHeader, BCardBody, BCollapse, BModal } from 'bootstrap-vue';\nimport axios from 'axios';\n\nexport default {\n  components: {\n    BCard,\n    BCardHeader,\n    BCardBody,\n    BCollapse,\n    BModal,\n  },\n  data() {\n    return {\n      isCollapsed: false,\n      formData: {\n        role: ''\n      },\n      editFormData: {\n        role: ''\n      },\n      table1: {\n        title: \"Tableau des rôles\",\n        subTitle: \"rôles\",\n        columns: [\"Id\", \"Role\"],\n        data: [] // Initialize as empty array\n      }\n    };\n  },\n  mounted() {\n    this.fetchRoles(); // Fetch roles when the component is mounted\n  },\n  methods: {\n    toggleCollapse() {\n      this.isCollapsed = !this.isCollapsed;\n    },\n    async fetchRoles() {\n      try {\n        // Fetch roles from your server-side endpoint\n        const response = await axios.get('http://localhost:5000/role');\n        // Map fetched data to match the table structure\n        this.table1.data = response.data.data.map(role => ({\n          Id: role.id,\n          Role: role.role\n        }));\n      } catch (error) {\n        console.error('Error fetching roles:', error);\n      }\n    },\n    async submitForm() {\n      try {\n        // Send POST request to add a new role\n        const response = await axios.post('http://localhost:5000/role', {\n          role: this.formData.role\n        });\n        // Update the table data if the request is successful\n        if (response.status === 201) {\n          this.table1.data.push({\n            Id: response.data.id,\n            Role: response.data.role\n          });\n          // Clear the form after adding the role\n          this.formData.role = '';\n          this.fetchRoles()\n        }\n      } catch (error) {\n        console.error('Error adding role:', error);\n      }\n    },\n    deleteRole(role) {\n      const confirmation = confirm(\"Are you sure you want to delete this role?\");\n      if (confirmation) {\n        axios.delete(`http://localhost:5000/role/${role.Id}`)\n          .then(() => {\n            this.fetchRoles(); // Refresh the table after deletion\n          })\n          .catch(error => {\n            console.error('Error deleting role:', error);\n          });\n      }\n    },\n    openEditModal(role) {\n  // Assign the role data and Id to editFormData\n  this.editFormData = {\n    Id: role.Id,\n    role: role.Role\n  };\n  this.$refs.editModal.show();\n},\n\n    submitEditForm() {\n  try {\n    // Send PUT request to update the role\n    axios.put(`http://localhost:5000/role/${this.editFormData.Id}`, {\n      role: this.editFormData.role\n    })\n    .then(() => {\n      // Find the index of the edited role in the table data\n      const index = this.table1.data.findIndex(item => item.Id === this.editFormData.Id);\n      // If the index is found, update the role data\n      if (index !== -1) {\n        this.table1.data[index].Role = this.editFormData.role;\n      }\n      this.$refs.editModal.hide(); // Hide the edit modal\n    })\n    .catch(error => {\n      console.error('Error editing role:', error);\n    });\n  } catch (error) {\n    console.error('Error editing role:', error);\n  }\n}\n\n  }\n};\n</script>\n\n<style scoped>\n/* Styling for the arrow */\n.arrow {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  vertical-align: middle;\n  border: solid;\n  border-width: 0.2em 0.2em 0 0.2em;\n  border-color: #000000;\n  transition: transform 0.3s;\n}\n\n/* Styling for the arrow when the form is collapsed */\n.rotated {\n  transform: rotate(-90deg);\n}\n.card .card-body {\n    padding: 15px 15px 20px 15px;\n}\n</style>\n"]}]}