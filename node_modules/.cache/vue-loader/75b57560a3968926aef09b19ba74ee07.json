{"remainingRequest":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\user\\Desktop\\serveurr\\vue_js\\src\\components\\Cards\\ChartCard.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\src\\components\\Cards\\ChartCard.vue","mtime":1713232121877},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1713232209249},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\babel-loader\\lib\\index.js","mtime":1713232210282},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1713232209249},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\vue-loader\\lib\\index.js","mtime":1713232211778}],"contextDependencies":[],"result":["\nimport Card from \"./Card.vue\";\nexport default {\n  name: \"chart-card\",\n  components: {\n    Card,\n  },\n  props: {\n    footerText: {\n      type: String,\n      default: \"\",\n    },\n    title: {\n      type: String,\n      default: \"\",\n    },\n    subTitle: {\n      type: String,\n      default: \"\",\n    },\n    chartType: {\n      type: String,\n      default: \"Line\", // Line | Pie | Bar\n    },\n    chartOptions: {\n      type: Object,\n      default: () => {\n        return {};\n      },\n    },\n    chartData: {\n      type: Object,\n      default: () => {\n        return {\n          labels: [],\n          series: [],\n        };\n      },\n    },\n  },\n  data() {\n    return {\n      chartId: \"no-id\",\n    };\n  },\n  methods: {\n    /***\n     * Initializes the chart by merging the chart options sent via props and the default chart options\n     */\n    initChart(Chartist) {\n      const chartIdQuery = `#${this.chartId}`;\n      Chartist[this.chartType](chartIdQuery, this.chartData, this.chartOptions);\n    },\n    /***\n     * Assigns a random id to the chart\n     */\n    updateChartId() {\n      const currentTime = new Date().getTime().toString();\n      const randomInt = this.getRandomInt(0, currentTime);\n      this.chartId = `div_${randomInt}`;\n    },\n    getRandomInt(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    },\n  },\n  mounted() {\n    this.updateChartId();\n    import(\"chartist\").then((Chartist) => {\n      let ChartistLib = Chartist.default || Chartist;\n      this.$nextTick(() => {\n        this.initChart(ChartistLib);\n      });\n    });\n  },\n};\n",{"version":3,"sources":["ChartCard.vue"],"names":[],"mappings":";AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ChartCard.vue","sourceRoot":"src/components/Cards","sourcesContent":["<template>\n  <card>\n    <template slot=\"header\">\n      <h4 v-if=\"$slots.title || title\" class=\"card-title\">\n        <slot name=\"title\">\n          {{ title }}\n        </slot>\n      </h4>\n      <p class=\"card-category\">\n        <slot name=\"subTitle\">\n          {{ subTitle }}\n        </slot>\n      </p>\n    </template>\n    <div>\n      <div :id=\"chartId\" class=\"ct-chart\"></div>\n      <div class=\"footer\">\n        <div class=\"chart-legend\">\n          <slot name=\"legend\"></slot>\n        </div>\n        <hr />\n        <div class=\"stats\">\n          <slot name=\"footer\"></slot>\n        </div>\n        <div class=\"pull-right\"></div>\n      </div>\n    </div>\n  </card>\n</template>\n<script>\nimport Card from \"./Card.vue\";\nexport default {\n  name: \"chart-card\",\n  components: {\n    Card,\n  },\n  props: {\n    footerText: {\n      type: String,\n      default: \"\",\n    },\n    title: {\n      type: String,\n      default: \"\",\n    },\n    subTitle: {\n      type: String,\n      default: \"\",\n    },\n    chartType: {\n      type: String,\n      default: \"Line\", // Line | Pie | Bar\n    },\n    chartOptions: {\n      type: Object,\n      default: () => {\n        return {};\n      },\n    },\n    chartData: {\n      type: Object,\n      default: () => {\n        return {\n          labels: [],\n          series: [],\n        };\n      },\n    },\n  },\n  data() {\n    return {\n      chartId: \"no-id\",\n    };\n  },\n  methods: {\n    /***\n     * Initializes the chart by merging the chart options sent via props and the default chart options\n     */\n    initChart(Chartist) {\n      const chartIdQuery = `#${this.chartId}`;\n      Chartist[this.chartType](chartIdQuery, this.chartData, this.chartOptions);\n    },\n    /***\n     * Assigns a random id to the chart\n     */\n    updateChartId() {\n      const currentTime = new Date().getTime().toString();\n      const randomInt = this.getRandomInt(0, currentTime);\n      this.chartId = `div_${randomInt}`;\n    },\n    getRandomInt(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    },\n  },\n  mounted() {\n    this.updateChartId();\n    import(\"chartist\").then((Chartist) => {\n      let ChartistLib = Chartist.default || Chartist;\n      this.$nextTick(() => {\n        this.initChart(ChartistLib);\n      });\n    });\n  },\n};\n</script>\n<style></style>\n"]}]}