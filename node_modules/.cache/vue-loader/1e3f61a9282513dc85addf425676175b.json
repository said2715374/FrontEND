{"remainingRequest":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\user\\Desktop\\serveurr\\vue_js\\src\\pages\\transactionview.vue?vue&type=style&index=0&id=6d88d42f&scoped=true&lang=css","dependencies":[{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\src\\pages\\transactionview.vue","mtime":1713232124284},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\css-loader\\index.js","mtime":1713232207389},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1713232213363},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1713232209249},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\vue-loader\\lib\\index.js","mtime":1713232211778}],"contextDependencies":[],"result":["\r\n/* Styling for the arrow */\r\n.arrow {\r\n  display: inline-block;\r\n  width: 0;\r\n  height: 0;\r\n  vertical-align: middle;\r\n  border: solid;\r\n  border-width: 0.2em 0.2em 0 0.2em;\r\n  border-color: #000000;\r\n  transition: transform 0.3s;\r\n}\r\n\r\n/* Styling for the arrow when the form is collapsed */\r\n.rotated {\r\n  transform: rotate(-90deg);\r\n}\r\n.card .card-body {\r\n  padding: 15px 15px 20px 15px;\r\n}\r\n",{"version":3,"sources":["transactionview.vue"],"names":[],"mappings":";AA+RA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"transactionview.vue","sourceRoot":"src/pages","sourcesContent":["<template>\r\n  <div class=\"row\">\r\n    <div class=\"col-12\">\r\n      <!-- Collapsible form -->\r\n      <b-card>\r\n        <b-card-header id=\"formCollapseHeader\">\r\n          <h5 class=\"mb-0\">\r\n            <button class=\"btn btn-link\" type=\"button\" @click=\"toggleCollapse\">\r\n              Ajouter une nouvelle transaction\r\n              <span class=\"arrow\" :class=\"{ 'rotated': isCollapsed }\"></span>\r\n            </button>\r\n          </h5>\r\n        </b-card-header>\r\n        <b-collapse id=\"formCollapse\" v-model=\"isCollapsed\">\r\n          <b-card-body>\r\n            <form @submit.prevent=\"submitForm\" class=\"needs-validation\" novalidate>\r\n              <div class=\"form-group\">\r\n                <label for=\"date\">Date:</label>\r\n                <input v-model=\"formData.date\" type=\"date\" class=\"form-control\" id=\"date\" required>\r\n                <div class=\"invalid-feedback\">Please enter a valid date.</div>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label for=\"employeeNumber\">Employee Number:</label>\r\n                <input v-model=\"formData.employeeNumber\" type=\"number\" class=\"form-control\" id=\"employeeNumber\" placeholder=\"Enter Employee Number\" required>\r\n                <div class=\"invalid-feedback\">Please enter a valid employee number.</div>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label for=\"amount\">Montant</label>\r\n                <input v-model=\"formData.amount\" type=\"number\" class=\"form-control\" id=\"amount\" placeholder=\"Enter Amount\" required>\r\n                <div class=\"invalid-feedback\">Please enter a valid amount.</div>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label for=\"cashierId\">Cashier ID:</label>\r\n                <select v-model=\"formData.cashierId\" class=\"form-control\" id=\"cashierId\" required>\r\n                  <option v-for=\"caisse in caisses\" :value=\"caisse.id\" :key=\"caisse.id\">{{ caisse.id }}</option>\r\n                </select>\r\n                <div class=\"invalid-feedback\">Please select a cashier ID.</div>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label for=\"paymentModeId\">Payment Mode:</label>\r\n                <select v-model=\"formData.paymentModeId\" class=\"form-control\" id=\"paymentModeId\" required>\r\n                  <option value=\"\" disabled selected>Select Payment Mode</option>\r\n                  <option v-for=\"mode in paymentModes\" :key=\"mode.id\" :value=\"mode.id\">{{ mode.process }}</option>\r\n                </select>\r\n                <div class=\"invalid-feedback\">Please select a payment mode.</div>\r\n              </div>\r\n              <button type=\"submit\" class=\"btn btn-primary\">Add Product</button>\r\n            </form>\r\n          </b-card-body>\r\n        </b-collapse>\r\n      </b-card>\r\n\r\n      <!-- Bootstrap Modal for Edit -->\r\n      <b-modal ref=\"editModal\" title=\"Edit Transaction\" @ok=\"submitEditForm\">\r\n        <div>\r\n          <div class=\"form-group\">\r\n            <label for=\"editDate\">Date:</label>\r\n            <input v-model=\"editFormData.date\" type=\"date\" class=\"form-control\" id=\"editDate\" required>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"editEmployeeNumber\">Employee Number:</label>\r\n            <input v-model=\"editFormData.employeeNumber\" type=\"number\" class=\"form-control\" id=\"editEmployeeNumber\" required>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"editAmount\">Amount:</label>\r\n            <input v-model=\"editFormData.amount\" type=\"number\" class=\"form-control\" id=\"editAmount\" required>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"editCashierId\">Cashier ID:</label>\r\n            <select v-model=\"editFormData.cashierId\" class=\"form-control\" id=\"editCashierId\" required>\r\n              <option v-for=\"caisse in caisses\" :value=\"caisse.id\" :key=\"caisse.id\">{{ caisse.id }}</option>\r\n            </select>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"editPaymentModeId\">Payment Mode:</label>\r\n            <select v-model=\"editFormData.paymentModeId\" class=\"form-control\" id=\"editPaymentModeId\" required>\r\n              <option value=\"\" disabled selected>Select Payment Mode</option>\r\n              <option v-for=\"mode in paymentModes\" :key=\"mode.id\" :value=\"mode.id\">{{ mode.process }}</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </b-modal>\r\n\r\n      <!-- Your existing card -->\r\n      <card :title=\"table1.title\" :subTitle=\"table1.subTitle\">\r\n        <div slot=\"raw-content\" class=\"table-responsive\">\r\n          <table class=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th v-for=\"column in table1.columns\" :key=\"column\">{{ column }}</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr v-for=\"(item, index) in table1.data\" :key=\"index\">\r\n                <td v-for=\"(value, key) in item\" :key=\"key\">{{ value }}</td>\r\n                <td>\r\n                  <button class=\"btn btn-danger\" @click=\"deleteProduct(item)\">Delete</button>\r\n                  <button class=\"btn btn-warning\" @click=\"editProduct(item)\">Edit</button>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </card>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { BCard, BCardHeader, BCardBody, BCollapse, BModal } from 'bootstrap-vue';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  components: {\r\n    BCard,\r\n    BCardHeader,\r\n    BCardBody,\r\n    BCollapse,\r\n    BModal,\r\n  },\r\n  data() {\r\n    return {\r\n      isCollapsed: false,\r\n      formData: {\r\n        date: '',\r\n        employeeNumber: '',\r\n        amount: '',\r\n        cashierId: '',\r\n        paymentModeId: ''\r\n      },\r\n      editFormData: {\r\n        id: '',\r\n        date: '',\r\n        employeeNumber: '',\r\n        amount: '',\r\n        cashierId: '',\r\n        paymentModeId: ''\r\n      },\r\n      table1: {\r\n        title: \"Table des transactions\",\r\n        subTitle: \"transactions\",\r\n        columns: [\"ID\", \"Date\", \"Employee Number\", \"Amount\", \"Cashier ID\", \"Payment Mode\"],\r\n        data: [] // Initialize as empty array\r\n      },\r\n      caisses: [], // Initialize caisses array\r\n      paymentModes: [] // Initialize paymentModes array\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchProducts();\r\n    this.fetchCaisses();\r\n    this.fetchPaymentModes();\r\n  },\r\n  methods: {\r\n    toggleCollapse() {\r\n      this.isCollapsed = !this.isCollapsed;\r\n    },\r\n    async fetchProducts() {\r\n      try {\r\n        // Fetch products from your server-side endpoint\r\n        const response = await axios.get('http://localhost:5000/transactionRouter');\r\n        // Fetch payment modes from your server-side endpoint\r\n        const paymentModesResponse = await axios.get('http://localhost:5000/modePaiementRouter');\r\n        const paymentModes = paymentModesResponse.data.data;\r\n\r\n        // Map fetched data to match the table structure\r\n        this.table1.data = response.data.data.map(product => {\r\n          // Find the corresponding payment mode for the current product's ModePaiementId\r\n          const paymentMode = paymentModes.find(mode => mode.id === product.ModePaiementId);\r\n          // If a payment mode is found, use its process value; otherwise, use an empty string\r\n          const paymentProcess = paymentMode ? paymentMode.process : '';\r\n\r\n          return {\r\n            ID: product.id,\r\n            Date: product.date,\r\n            \"Employee Number\": product.numero_employer,\r\n            Amount: product.montant,\r\n            \"Cashier ID\": product.CaisseId,\r\n            \"Payment Mode\": paymentProcess\r\n          };\r\n        });\r\n      } catch (error) {\r\n        console.error('Error fetching products:', error);\r\n      }\r\n    },\r\n    async fetchCaisses() {\r\n      try {\r\n        // Fetch caisses from your server-side endpoint\r\n        const response = await axios.get('http://localhost:5000/caisse');\r\n        this.caisses = response.data.data;\r\n      } catch (error) {\r\n        console.error('Error fetching caisses:', error);\r\n      }\r\n    },\r\n    async fetchPaymentModes() {\r\n      try {\r\n        // Fetch payment modes from your server-side endpoint\r\n        const response = await axios.get('http://localhost:5000/modePaiementRouter');\r\n        this.paymentModes = response.data.data;\r\n      } catch (error) {\r\n        console.error('Error fetching payment modes:', error);\r\n      }\r\n    },\r\n    async submitForm() {\r\n      try {\r\n        // Send POST request to add a new product\r\n        const response = await axios.post('http://localhost:5000/transactionRouter', {\r\n          date: this.formData.date,\r\n          numero_employer: this.formData.employeeNumber,\r\n          montant: this.formData.amount,\r\n          CaisseId: this.formData.cashierId,\r\n          ModePaiementId: this.formData.paymentModeId\r\n        });\r\n        // Update the table data if the request is successful\r\n        if (response.status === 201) {\r\n          this.table1.data.push({\r\n            ID: response.data.id,\r\n            Date: response.data.date,\r\n            \"Employee Number\": response.data.numero_employer,\r\n            Amount: response.data.montant,\r\n            \"Cashier ID\": response.data.CaisseId,\r\n            \"Payment Mode\": response.data.process // Use process instead of ModePaiementId\r\n          });\r\n          // Clear the form after adding the product\r\n          this.formData.date = '';\r\n          this.formData.employeeNumber = '';\r\n          this.formData.amount = '';\r\n          this.formData.cashierId = '';\r\n          this.formData.paymentModeId = '';\r\n        }\r\n      } catch (error) {\r\n        console.error('Error adding product:', error);\r\n      }\r\n    },\r\n    async deleteProduct(product) {\r\n      const confirmation = confirm(\"Are you sure you want to delete this product?\");\r\n      if (confirmation) {\r\n        try {\r\n          // Send DELETE request to delete the product\r\n          await axios.delete(`http://localhost:5000/transactionRouter/${product.ID}`);\r\n          // Refresh the table after deletion\r\n          this.fetchProducts();\r\n        } catch (error) {\r\n          console.error('Error deleting product:', error);\r\n        }\r\n      }\r\n    },\r\n    editProduct(product) {\r\n      // Set editFormData with the product data\r\n      this.editFormData = {\r\n        id: product.ID,\r\n        date: product.Date,\r\n        employeeNumber: product[\"Employee Number\"],\r\n        amount: product.Amount,\r\n        cashierId: product[\"Cashier ID\"],\r\n        paymentModeId: product[\"Payment Mode\"]\r\n      };\r\n      // Show the edit modal\r\n      this.$refs.editModal.show();\r\n    },\r\n    submitEditForm() {\r\n      try {\r\n        // Send PUT request to edit the product\r\n        axios.put(`http://localhost:5000/transactionRouter/${this.editFormData.id}`, {\r\n          date: this.editFormData.date,\r\n          numero_employer: this.editFormData.employeeNumber,\r\n          montant: this.editFormData.amount,\r\n          CaisseId: this.editFormData.cashierId,\r\n          ModePaiementId: this.editFormData.paymentModeId\r\n        })\r\n        .then(() => {\r\n          this.fetchProducts(); // Refresh the table after editing\r\n          this.$refs.editModal.hide(); // Hide the edit modal\r\n        })\r\n        .catch(error => {\r\n          console.error('Error editing product:', error);\r\n        });\r\n      } catch (error) {\r\n        console.error('Error editing product:', error);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Styling for the arrow */\r\n.arrow {\r\n  display: inline-block;\r\n  width: 0;\r\n  height: 0;\r\n  vertical-align: middle;\r\n  border: solid;\r\n  border-width: 0.2em 0.2em 0 0.2em;\r\n  border-color: #000000;\r\n  transition: transform 0.3s;\r\n}\r\n\r\n/* Styling for the arrow when the form is collapsed */\r\n.rotated {\r\n  transform: rotate(-90deg);\r\n}\r\n.card .card-body {\r\n  padding: 15px 15px 20px 15px;\r\n}\r\n</style>\r\n"]}]}