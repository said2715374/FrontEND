{"remainingRequest":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\user\\Desktop\\serveurr\\vue_js\\src\\components\\SidebarPlugin\\SideBar.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\src\\components\\SidebarPlugin\\SideBar.vue","mtime":1713232122616},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1713232209249},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\babel-loader\\lib\\index.js","mtime":1713232210282},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1713232209249},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\vue-loader\\lib\\index.js","mtime":1713232211778}],"contextDependencies":[],"result":["\nimport MovingArrow from \"./MovingArrow.vue\";\nimport SidebarLink from \"./SidebarLink\";\nexport default {\n  props: {\n    title: {\n      type: String,\n      default: \"Admin Dashboard\",\n    },\n    backgroundColor: {\n      type: String,\n      default: \"black\",\n      validator: (value) => {\n        let acceptedValues = [\"white\", \"black\", \"darkblue\"];\n        return acceptedValues.indexOf(value) !== -1;\n      },\n    },\n    activeColor: {\n      type: String,\n      default: \"success\",\n      validator: (value) => {\n        let acceptedValues = [\n          \"primary\",\n          \"info\",\n          \"success\",\n          \"warning\",\n          \"danger\",\n        ];\n        return acceptedValues.indexOf(value) !== -1;\n      },\n    },\n    sidebarLinks: {\n      type: Array,\n      default: () => [],\n    },\n    autoClose: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  provide() {\n    return {\n      autoClose: this.autoClose,\n      addLink: this.addLink,\n      removeLink: this.removeLink,\n    };\n  },\n  components: {\n    MovingArrow,\n    SidebarLink,\n  },\n  computed: {\n    /**\n     * Styles to animate the arrow near the current active sidebar link\n     * @returns {{transform: string}}\n     */\n    arrowMovePx() {\n      return this.linkHeight * this.activeLinkIndex;\n    },\n  },\n  data() {\n    return {\n      linkHeight: 65,\n      activeLinkIndex: 0,\n      windowWidth: 0,\n      isWindows: false,\n      hasAutoHeight: false,\n      links: [],\n    };\n  },\n  methods: {\n    findActiveLink() {\n      this.links.forEach((link, index) => {\n        if (link.isActive()) {\n          this.activeLinkIndex = index;\n        }\n      });\n    },\n    addLink(link) {\n      const index = this.$slots.links.indexOf(link.$vnode);\n      this.links.splice(index, 0, link);\n    },\n    removeLink(link) {\n      const index = this.links.indexOf(link);\n      if (index > -1) {\n        this.links.splice(index, 1);\n      }\n    },\n  },\n  mounted() {\n    this.$watch(\"$route\", this.findActiveLink, {\n      immediate: true,\n    });\n  },\n};\n",{"version":3,"sources":["SideBar.vue"],"names":[],"mappings":";AAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SideBar.vue","sourceRoot":"src/components/SidebarPlugin","sourcesContent":["<template>\n  <div\n    class=\"sidebar\"\n    :data-background-color=\"backgroundColor\"\n    :data-active-color=\"activeColor\"\n  >\n\n    <div class=\"sidebar-wrapper\" id=\"style-3\">\n      <div class=\"logo\">\n        <a href=\"#\" class=\"simple-text\">\n          <div class=\"logo-img\">\n            <img src=\"@/assets/img/vue-logo.png\" alt=\"\" />\n          </div>\n          {{ title }}\n        </a>\n      </div>\n      <slot> </slot>\n      <ul class=\"nav\">\n        <!--By default vue-router adds an active class to each route link. This way the links are colored when clicked-->\n        <slot name=\"links\">\n          <sidebar-link\n            v-for=\"(link, index) in sidebarLinks\"\n            :key=\"index\"\n            :to=\"link.path\"\n            :name=\"link.name\"\n            :icon=\"link.icon\"\n          >\n          </sidebar-link>\n        </slot>\n      </ul>\n      <moving-arrow :move-y=\"arrowMovePx\"> </moving-arrow>\n    </div>\n  </div>\n</template>\n<script>\nimport MovingArrow from \"./MovingArrow.vue\";\nimport SidebarLink from \"./SidebarLink\";\nexport default {\n  props: {\n    title: {\n      type: String,\n      default: \"Admin Dashboard\",\n    },\n    backgroundColor: {\n      type: String,\n      default: \"black\",\n      validator: (value) => {\n        let acceptedValues = [\"white\", \"black\", \"darkblue\"];\n        return acceptedValues.indexOf(value) !== -1;\n      },\n    },\n    activeColor: {\n      type: String,\n      default: \"success\",\n      validator: (value) => {\n        let acceptedValues = [\n          \"primary\",\n          \"info\",\n          \"success\",\n          \"warning\",\n          \"danger\",\n        ];\n        return acceptedValues.indexOf(value) !== -1;\n      },\n    },\n    sidebarLinks: {\n      type: Array,\n      default: () => [],\n    },\n    autoClose: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  provide() {\n    return {\n      autoClose: this.autoClose,\n      addLink: this.addLink,\n      removeLink: this.removeLink,\n    };\n  },\n  components: {\n    MovingArrow,\n    SidebarLink,\n  },\n  computed: {\n    /**\n     * Styles to animate the arrow near the current active sidebar link\n     * @returns {{transform: string}}\n     */\n    arrowMovePx() {\n      return this.linkHeight * this.activeLinkIndex;\n    },\n  },\n  data() {\n    return {\n      linkHeight: 65,\n      activeLinkIndex: 0,\n      windowWidth: 0,\n      isWindows: false,\n      hasAutoHeight: false,\n      links: [],\n    };\n  },\n  methods: {\n    findActiveLink() {\n      this.links.forEach((link, index) => {\n        if (link.isActive()) {\n          this.activeLinkIndex = index;\n        }\n      });\n    },\n    addLink(link) {\n      const index = this.$slots.links.indexOf(link.$vnode);\n      this.links.splice(index, 0, link);\n    },\n    removeLink(link) {\n      const index = this.links.indexOf(link);\n      if (index > -1) {\n        this.links.splice(index, 1);\n      }\n    },\n  },\n  mounted() {\n    this.$watch(\"$route\", this.findActiveLink, {\n      immediate: true,\n    });\n  },\n};\n</script>\n<style></style>\n"]}]}