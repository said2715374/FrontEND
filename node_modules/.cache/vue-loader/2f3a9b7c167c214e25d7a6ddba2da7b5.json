{"remainingRequest":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\user\\Desktop\\serveurr\\vue_js\\src\\pages\\revnuejournaliers.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\src\\pages\\revnuejournaliers.vue","mtime":1713232123951},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1713232209249},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\babel-loader\\lib\\index.js","mtime":1713232210282},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1713232209249},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\vue-loader\\lib\\index.js","mtime":1713232211778}],"contextDependencies":[],"result":["\r\nimport { BCard, BCardHeader, BCardBody, BCollapse, BModal } from 'bootstrap-vue';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  components: {\r\n    BCard,\r\n    BCardHeader,\r\n    BCardBody,\r\n    BCollapse,\r\n    BModal,\r\n  },\r\n  data() {\r\n    return {\r\n      isCollapsed: false,\r\n      formData: {\r\n        revenue: '',\r\n        caisseId: null, // Initialize to null\r\n      },\r\n      editFormData: {\r\n        id: null,\r\n        revenue: '',\r\n        caisseId: null,\r\n      },\r\n      table1: {\r\n        title: \"Revenue Table\",\r\n        subTitle: \"Here is a subtitle for this table\",\r\n        columns: [\"ID\", \"Revenue\", \"Caisse ID\"],\r\n        data: [] // Initialize as empty array\r\n      },\r\n      caisses: [], // To store the caisses fetched from the server\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchRevenue(); // Fetch revenue when the component is mounted\r\n    this.fetchCaisses(); // Fetch caisses when the component is mounted\r\n  },\r\n  methods: {\r\n    toggleCollapse() {\r\n      this.isCollapsed = !this.isCollapsed;\r\n    },\r\n    async fetchRevenue() {\r\n      try {\r\n        // Fetch revenue from your server-side endpoint\r\n        const response = await axios.get('http://localhost:5000/revnue');\r\n        // Map fetched data to match the table structure\r\n        this.table1.data = response.data.data.map(revenue => ({\r\n          ID: revenue.id,\r\n          Revenue: revenue.Revnue,\r\n          \"Caisse ID\": revenue.CaisseId\r\n        }));\r\n      } catch (error) {\r\n        console.error('Error fetching revenue:', error);\r\n      }\r\n    },\r\n    async fetchCaisses() {\r\n      try {\r\n        // Fetch caisses from your server-side endpoint\r\n        const response = await axios.get('http://localhost:5000/caisse');\r\n        // Store fetched caisses\r\n        this.caisses = response.data.data;\r\n      } catch (error) {\r\n        console.error('Error fetching caisses:', error);\r\n      }\r\n    },\r\n    async submitForm() {\r\n      try {\r\n        // Send POST request to add a new revenue\r\n        const response = await axios.post('http://localhost:5000/revnue', {\r\n          Revnue: this.formData.revenue,\r\n          CaisseId: this.formData.caisseId // Include the Caisse ID in the request\r\n        });\r\n        // Update the table data if the request is successful\r\n        if (response.status === 201) {\r\n          this.table1.data.push({\r\n            ID: response.data.id,\r\n            Revenue: response.data.Revnue,\r\n            \"Caisse ID\": response.data.CaisseId\r\n          });\r\n          await this.fetchRevenue();\r\n          // Clear the form after adding the revenue\r\n          this.formData.revenue = '';\r\n          this.formData.caisseId = null; // Clear the Caisse ID field as well\r\n        }\r\n      } catch (error) {\r\n        console.error('Error adding revenue:', error);\r\n      }\r\n    },\r\n    async deleteRevenue(revenue) {\r\n      const confirmation = confirm(\"Are you sure you want to delete this revenue?\");\r\n      if (confirmation) {\r\n        try {\r\n          // Send DELETE request to delete the revenue\r\n          await axios.delete(`http://localhost:5000/revnue/${revenue.ID}`);\r\n          // Refresh the table after deletion\r\n          this.fetchRevenue();\r\n        } catch (error) {\r\n          console.error('Error deleting revenue:', error);\r\n        }\r\n      }\r\n    },\r\n    openEditModal(revenue) {\r\n      this.editFormData.id = revenue.ID;\r\n      this.editFormData.revenue = revenue.Revenue;\r\n      this.editFormData.caisseId = revenue[\"Caisse ID\"];\r\n      this.$refs.editModal.show();\r\n    },\r\n    async submitEditForm() {\r\n      try {\r\n        // Send PUT request to update the revenue\r\n        await axios.put(`http://localhost:5000/revnue/${this.editFormData.id}`, {\r\n          Revnue: this.editFormData.revenue,\r\n          CaisseId: this.editFormData.caisseId // Include the updated Caisse ID in the request\r\n        });\r\n        // Hide the modal after editing\r\n        this.$refs.editModal.hide();\r\n        // Refresh the table after editing\r\n        this.fetchRevenue();\r\n      } catch (error) {\r\n        console.error('Error editing revenue:', error);\r\n      }\r\n    },\r\n  }\r\n};\r\n",{"version":3,"sources":["revnuejournaliers.vue"],"names":[],"mappingsfile":"revnuejournaliers.vue","sourceRoot":"src/pages","sourcesContent":["<template>\r\n  <div class=\"row\">\r\n    <div class=\"col-12\">\r\n      <!-- Collapsible form -->\r\n      <b-card>\r\n        <b-card-header id=\"formCollapseHeader\">\r\n          <h5 class=\"mb-0\">\r\n            <button class=\"btn btn-link\" type=\"button\" @click=\"toggleCollapse\">\r\n              Ajouter un nouveau revenu\r\n              <span class=\"arrow\" :class=\"{ 'rotated': isCollapsed }\"></span>\r\n            </button>\r\n          </h5>\r\n        </b-card-header>\r\n        <b-collapse id=\"formCollapse\" v-model=\"isCollapsed\">\r\n          <b-card-body>\r\n            <form @submit.prevent=\"submitForm\" class=\"needs-validation\" novalidate>\r\n              <div class=\"form-group\">\r\n                <label for=\"revenue\">Revenue</label>\r\n                <input v-model=\"formData.revenue\" type=\"number\" class=\"form-control\" id=\"revenue\" placeholder=\"Revenue\" required>\r\n                <div class=\"invalid-feedback\">Please enter a valid revenue.</div>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label for=\"caisseId\">Caisse ID</label>\r\n                <select v-model=\"formData.caisseId\" class=\"form-control\" id=\"caisseId\" required>\r\n                  <option v-for=\"caisse in caisses\" :value=\"caisse.id\" :key=\"caisse.id\">{{ caisse.id }}</option>\r\n                </select>\r\n                <div class=\"invalid-feedback\">Please select a Caisse ID.</div>\r\n              </div>\r\n              <button type=\"submit\" class=\"btn btn-primary\">Add Revenue</button>\r\n            </form>\r\n\r\n          </b-card-body>\r\n        </b-collapse>\r\n      </b-card>\r\n\r\n      <!-- Your existing card -->\r\n      <card :title=\"table1.title\" :subTitle=\"table1.subTitle\">\r\n        <div slot=\"raw-content\" class=\"table-responsive\">\r\n          <table class=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th v-for=\"column in table1.columns\" :key=\"column\">{{ column }}</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr v-for=\"(item, index) in table1.data\" :key=\"index\">\r\n                <td v-for=\"(value, key) in item\" :key=\"key\">{{ value }}</td>\r\n                <td>\r\n                  <button class=\"btn btn-danger\" @click=\"deleteRevenue(item)\">Supprimer</button>\r\n                  <button class=\"btn btn-warning\" @click=\"openEditModal(item)\">Modifier</button>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </card>\r\n\r\n      <!-- Edit Revenue Modal -->\r\n      <b-modal ref=\"editModal\" title=\"Edit Revenue\">\r\n        <form @submit.prevent=\"submitEditForm\">\r\n          <div class=\"form-group\">\r\n            <label for=\"editRevenue\">Revenue</label>\r\n            <input v-model=\"editFormData.revenue\" type=\"number\" class=\"form-control\" id=\"editRevenue\" required>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"editCaisseId\">Caisse ID</label>\r\n            <select v-model=\"editFormData.caisseId\" class=\"form-control\" id=\"editCaisseId\" required>\r\n              <option v-for=\"caisse in caisses\" :value=\"caisse.id\" :key=\"caisse.id\">{{ caisse.id }}</option>\r\n            </select>\r\n          </div>\r\n          <button type=\"submit\" class=\"btn btn-primary\">Save Changes</button>\r\n        </form>\r\n      </b-modal>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { BCard, BCardHeader, BCardBody, BCollapse, BModal } from 'bootstrap-vue';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  components: {\r\n    BCard,\r\n    BCardHeader,\r\n    BCardBody,\r\n    BCollapse,\r\n    BModal,\r\n  },\r\n  data() {\r\n    return {\r\n      isCollapsed: false,\r\n      formData: {\r\n        revenue: '',\r\n        caisseId: null, // Initialize to null\r\n      },\r\n      editFormData: {\r\n        id: null,\r\n        revenue: '',\r\n        caisseId: null,\r\n      },\r\n      table1: {\r\n        title: \"Revenue Table\",\r\n        subTitle: \"Here is a subtitle for this table\",\r\n        columns: [\"ID\", \"Revenue\", \"Caisse ID\"],\r\n        data: [] // Initialize as empty array\r\n      },\r\n      caisses: [], // To store the caisses fetched from the server\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchRevenue(); // Fetch revenue when the component is mounted\r\n    this.fetchCaisses(); // Fetch caisses when the component is mounted\r\n  },\r\n  methods: {\r\n    toggleCollapse() {\r\n      this.isCollapsed = !this.isCollapsed;\r\n    },\r\n    async fetchRevenue() {\r\n      try {\r\n        // Fetch revenue from your server-side endpoint\r\n        const response = await axios.get('http://localhost:5000/revnue');\r\n        // Map fetched data to match the table structure\r\n        this.table1.data = response.data.data.map(revenue => ({\r\n          ID: revenue.id,\r\n          Revenue: revenue.Revnue,\r\n          \"Caisse ID\": revenue.CaisseId\r\n        }));\r\n      } catch (error) {\r\n        console.error('Error fetching revenue:', error);\r\n      }\r\n    },\r\n    async fetchCaisses() {\r\n      try {\r\n        // Fetch caisses from your server-side endpoint\r\n        const response = await axios.get('http://localhost:5000/caisse');\r\n        // Store fetched caisses\r\n        this.caisses = response.data.data;\r\n      } catch (error) {\r\n        console.error('Error fetching caisses:', error);\r\n      }\r\n    },\r\n    async submitForm() {\r\n      try {\r\n        // Send POST request to add a new revenue\r\n        const response = await axios.post('http://localhost:5000/revnue', {\r\n          Revnue: this.formData.revenue,\r\n          CaisseId: this.formData.caisseId // Include the Caisse ID in the request\r\n        });\r\n        // Update the table data if the request is successful\r\n        if (response.status === 201) {\r\n          this.table1.data.push({\r\n            ID: response.data.id,\r\n            Revenue: response.data.Revnue,\r\n            \"Caisse ID\": response.data.CaisseId\r\n          });\r\n          await this.fetchRevenue();\r\n          // Clear the form after adding the revenue\r\n          this.formData.revenue = '';\r\n          this.formData.caisseId = null; // Clear the Caisse ID field as well\r\n        }\r\n      } catch (error) {\r\n        console.error('Error adding revenue:', error);\r\n      }\r\n    },\r\n    async deleteRevenue(revenue) {\r\n      const confirmation = confirm(\"Are you sure you want to delete this revenue?\");\r\n      if (confirmation) {\r\n        try {\r\n          // Send DELETE request to delete the revenue\r\n          await axios.delete(`http://localhost:5000/revnue/${revenue.ID}`);\r\n          // Refresh the table after deletion\r\n          this.fetchRevenue();\r\n        } catch (error) {\r\n          console.error('Error deleting revenue:', error);\r\n        }\r\n      }\r\n    },\r\n    openEditModal(revenue) {\r\n      this.editFormData.id = revenue.ID;\r\n      this.editFormData.revenue = revenue.Revenue;\r\n      this.editFormData.caisseId = revenue[\"Caisse ID\"];\r\n      this.$refs.editModal.show();\r\n    },\r\n    async submitEditForm() {\r\n      try {\r\n        // Send PUT request to update the revenue\r\n        await axios.put(`http://localhost:5000/revnue/${this.editFormData.id}`, {\r\n          Revnue: this.editFormData.revenue,\r\n          CaisseId: this.editFormData.caisseId // Include the updated Caisse ID in the request\r\n        });\r\n        // Hide the modal after editing\r\n        this.$refs.editModal.hide();\r\n        // Refresh the table after editing\r\n        this.fetchRevenue();\r\n      } catch (error) {\r\n        console.error('Error editing revenue:', error);\r\n      }\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Styling for the arrow */\r\n.arrow {\r\n  display: inline-block;\r\n  width: 0;\r\n  height: 0;\r\n  vertical-align: middle;\r\n  border: solid;\r\n  border-width: 0.2em 0.2em 0 0.2em;\r\n  border-color: #000000;\r\n  transition: transform 0.3s;\r\n}\r\n\r\n/* Styling for the arrow when the form is collapsed */\r\n.rotated {\r\n  transform: rotate(-90deg);\r\n}\r\n.card .card-body {\r\n  padding: 15px 15px 20px 15px;\r\n}\r\n</style>\r\n"]}]}