{"remainingRequest":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\user\\Desktop\\serveurr\\vue_js\\src\\pages\\Users.vue?vue&type=style&index=0&id=dd989bd8&scoped=true&lang=css","dependencies":[{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\src\\pages\\Users.vue","mtime":1713232124618},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\css-loader\\index.js","mtime":1713232207389},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1713232213363},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1713232209249},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\vue-loader\\lib\\index.js","mtime":1713232211778}],"contextDependencies":[],"result":["\n/* Styling for the arrow */\n.arrow {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  vertical-align: middle;\n  border: solid;\n  border-width: 0.2em 0.2em 0 0.2em;\n  border-color: #000000;\n  transition: transform 0.3s;\n}\n\n/* Styling for the arrow when the form is collapsed */\n.rotated {\n  transform: rotate(-90deg);\n}\n.card .card-body {\n    padding: 15px 15px 20px 15px;\n}\n.card {\n    border-radius: 6px;\n    box-shadow: 0 2px 2px rgba(204, 197, 185, 0.5);\n    background-color: #FFFFFF;\n    color: #252422;\n    margin-bottom: 20px;\n    position: relative;\n    width: 74rem;\n    z-index: 1;\n    border: none;\n}\n",{"version":3,"sources":["Users.vue"],"names":[],"mappings":";AAoOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Users.vue","sourceRoot":"src/pages","sourcesContent":["<template>\n  <div class=\"row\">\n    <div class=\"col-12\">\n      <!-- Collapsible form -->\n      <b-card>\n        <b-card-header id=\"formCollapseHeader\">\n          <h5 class=\"mb-0\">\n            <button class=\"btn btn-link\" type=\"button\" @click=\"toggleCollapse\">\n              Ajouter un nouvel utilisateur\n              <span class=\"arrow\" :class=\"{ 'rotated': isCollapsed }\"></span>\n            </button>\n          </h5>\n        </b-card-header>\n\n        <b-collapse id=\"formCollapse\" v-model=\"isCollapsed\">\n          <b-card-body>\n            <form @submit.prevent=\"submitForm\">\n              <div class=\"form-group\">\n                <label for=\"nom\">Nom:</label>\n                <input v-model=\"formData.nom\" type=\"text\" class=\"form-control\" id=\"nom\" placeholder=\"Enter Nom\" required>\n              </div>\n              <div class=\"form-group\">\n                <label for=\"prenom\">Prenom:</label>\n                <input v-model=\"formData.prenom\" type=\"text\" class=\"form-control\" id=\"prenom\" placeholder=\"Enter Prenom\" required>\n              </div>\n              <div class=\"form-group\">\n                <label for=\"DateNaissance\">Date de Naissance:</label>\n                <input v-model=\"formData.DateNaissance\" type=\"date\" class=\"form-control\" id=\"DateNaissance\" required>\n              </div>\n              <div class=\"form-group\">\n                <label for=\"Telephone\">Telephone:</label>\n                <input v-model=\"formData.Telephone\" type=\"text\" class=\"form-control\" id=\"Telephone\" placeholder=\"Enter Telephone\" required>\n              </div>\n              <div class=\"form-group\">\n                <label for=\"email\">email:</label>\n                <input v-model=\"formData.email\" type=\"text\" class=\"form-control\" id=\"email\" placeholder=\"Enter email\" required>\n              </div>\n              <div class=\"form-group\">\n                <label for=\"MotDePasse\">Mot de Passe:</label>\n                <input v-model=\"formData.MotDePasse\" type=\"text\" class=\"form-control\" id=\"MotDePasse\" placeholder=\"Enter Mot de Passe\" required>\n              </div>\n              <div class=\"form-group\">\n                <label for=\"RoleId\">Select Role:</label>\n                <select v-model=\"formData.RoleId\" class=\"form-control\" id=\"RoleId\" required>\n                  <option value=\"\" disabled selected>Select Role</option> <!-- Placeholder option -->\n                  <option v-for=\"role in roles\" :key=\"role.id\" :value=\"role.id\">{{ role.role }}</option>\n                </select>\n              </div>\n              <div class=\"form-group\">\n                <label for=\"MagasinId\">Magasin ID:</label>\n                <select v-model=\"formData.MagasinId\" class=\"form-control\" id=\"MagasinId\" >\n                  <option value=\"\" disabled selected>Select Magasin superviseur</option> <!-- Placeholder option -->\n                  <option v-for=\"magasin in magasins\" :key=\"magasin.id\" :value=\"magasin.id\">{{ magasin.superviseur }}</option>\n                </select>\n              </div>\n              <button type=\"submit\" class=\"btn btn-primary\">Add User</button>\n            </form>\n          </b-card-body>\n        </b-collapse>\n      </b-card>\n      \n      <!-- Your existing card -->\n      <card :title=\"table1.title\" :subTitle=\"table1.subTitle\">\n        <div slot=\"raw-content\" class=\"table-responsive\">\n          <table class=\"table\">\n            <thead>\n              <tr>\n                <th v-for=\"column in table1.columns\" :key=\"column\">{{ column }}</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"(item, index) in table1.data\" :key=\"index\">\n                <td v-for=\"(value, key) in item\" :key=\"key\">\n                  <span v-if=\"!item.editable\">{{ value }}</span>\n                  <input v-model=\"item[key]\" v-else class=\"form-control\">\n                </td>\n                <td>\n                  <button class=\"btn btn-danger\" @click=\"deleteUser(item)\">Supprimer</button>\n                  <button class=\"btn btn-warning\" @click=\"toggleEdit(item)\">{{ item.editable ? 'Save' : 'Modifier' }}</button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </card>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { BCard, BCardHeader, BCardBody, BCollapse } from 'bootstrap-vue';\nimport axios from 'axios';\n\nexport default {\n  components: {\n    BCard,\n    BCardHeader,\n    BCardBody,\n    BCollapse,\n  },\n  data() {\n    return {\n      isCollapsed: false,\n      formData: {\n        role: ''\n      },\n      table1: {\n        title: \"Tableau des utilisateurs\",\n        subTitle: \"utilisateurs\",\n        columns: [\"Id\", \"nom\", \"prenom\",\"DateNaissance\", \"Telephone\",\"Email\",\"RoleId\",\"MagasinId\"],\n        data: [] // Initialize as empty array\n      },\n      roles: [], // Array to store fetched roles\n      magasins: [] // Array to store fetched magasins\n    };\n  },\n  mounted() {\n    this.fetchUsers(); // Fetch roles when the component is mounted\n    this.fetchRoles(); // Fetch roles options\n    this.fetchMagasins(); // Fetch magasins options\n  },\n  methods: {\n    deleteUser(user) {\n      const confirmation = confirm(\"Are you sure you want to delete this user?\");\n      if (confirmation) {\n        axios.delete(`http://localhost:5000/utilisateurs/${user.Id}`)\n          .then(() => {\n            this.fetchUsers(); // Refresh the table after deletion\n          })\n          .catch(error => {\n            console.error('Error deleting user:', error);\n          });\n      }\n    },\n    async fetchRoles() {\n      try {\n        // Fetch roles options from your server-side endpoint\n        const response = await axios.get('http://localhost:5000/role');\n        // Store fetched roles options\n        this.roles = response.data.data;\n      } catch (error) {\n        console.error('Error fetching Roles:', error);\n      }\n    },\n    async fetchMagasins() {\n      try {\n        \n        const response = await axios.get('http://localhost:5000/magasinRouter');\n        // Store fetched magasins options\n        this.magasins = response.data.data;\n      } catch (error) {\n        console.error('Error fetching Magasins:', error);\n      }\n    },\n\n    toggleCollapse() {\n      this.isCollapsed = !this.isCollapsed;\n    },\n    async fetchUsers() {\n      try {\n        // Fetch roles from your server-side endpoint\n        const response = await axios.get('http://localhost:5000/utilisateurs');\n        \n        this.table1.data = response.data.data.map(user => ({\n          Id: user.id,\n          nom: user.nom,\n          prenom: user.prenom,\n          DateNaissance: this.formatDate(user.DateNaissance),\n          Telephone: user.Telephone,\n          email: user.email,\n          RoleId: user.RoleId,\n          MagasinId: user.MagasinId,\n          editable: false \n        }));\n      } catch (error) {\n        console.error('Error fetching Users:', error);\n      }\n    },\n    async submitForm() {\n      try {\n        // Send POST request to add a new user\n        const response = await axios.post('http://localhost:5000/utilisateurs', this.formData);\n        // Update the table data if the request is successful\n        if (response.status === 201) {\n          // Fetch updated user data after successful addition\n          this.fetchUsers();\n          // Clear the form after adding the user\n          this.formData = {\n            nom: '',\n            prenom: '',\n            DateNaissance: '',\n            Telephone: '',\n            email: '',\n            MotDePasse: '',\n            RoleId: '',\n            MagasinId: ''\n          };\n        }\n      } catch (error) {\n        console.error('Error adding user:', error);\n      }\n    },\n    toggleEdit(item) {\n      if (item.editable) {\n        // Send PUT request to update the user data\n        axios.put(`http://localhost:5000/utilisateurs/${item.Id}`, item)\n          .then(() => {\n            item.editable = false; \n          })\n          .catch(error => {\n            console.error('Error updating user:', error);\n          });\n      } else {\n        item.editable = true; // Set editable to true to enable inline editing\n      }\n    },\n    formatDate(dateString) {\n      // Parse the date string into a Date object\n      const date = new Date(dateString);\n      // Format the date as desired (e.g., YYYY-MM-DD)\n      return date.toISOString().split('T')[0];\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Styling for the arrow */\n.arrow {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  vertical-align: middle;\n  border: solid;\n  border-width: 0.2em 0.2em 0 0.2em;\n  border-color: #000000;\n  transition: transform 0.3s;\n}\n\n/* Styling for the arrow when the form is collapsed */\n.rotated {\n  transform: rotate(-90deg);\n}\n.card .card-body {\n    padding: 15px 15px 20px 15px;\n}\n.card {\n    border-radius: 6px;\n    box-shadow: 0 2px 2px rgba(204, 197, 185, 0.5);\n    background-color: #FFFFFF;\n    color: #252422;\n    margin-bottom: 20px;\n    position: relative;\n    width: 74rem;\n    z-index: 1;\n    border: none;\n}\n</style>\n"]}]}