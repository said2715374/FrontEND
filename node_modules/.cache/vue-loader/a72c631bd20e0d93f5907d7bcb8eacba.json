{"remainingRequest":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\user\\Desktop\\serveurr\\vue_js\\src\\pages\\Typography.vue?vue&type=style&index=0&id=6190e95a&scoped=true&lang=css","dependencies":[{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\src\\pages\\Typography.vue","mtime":1713232124451},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\css-loader\\index.js","mtime":1713232207389},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1713232213363},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1713232209249},{"path":"C:\\Users\\user\\Desktop\\serveurr\\vue_js\\node_modules\\vue-loader\\lib\\index.js","mtime":1713232211778}],"contextDependencies":[],"result":["\n/* Styling for the arrow */\n.arrow {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  vertical-align: middle;\n  border: solid;\n  border-width: 0.2em 0.2em 0 0.2em;\n  border-color: #000000;\n  transition: transform 0.3s;\n}\n\n/* Styling for the arrow when the form is collapsed */\n.rotated {\n  transform: rotate(-90deg);\n}\n",{"version":3,"sources":["Typography.vue"],"names":[],"mappings":";AAoJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"Typography.vue","sourceRoot":"src/pages","sourcesContent":["<template>\n  <div class=\"row\">\n    <div class=\"col-12\">\n      <!-- Collapsible form -->\n      <b-card>\n        <b-card-header id=\"formCollapseHeader\">\n          <h5 class=\"mb-0\">\n            <button class=\"btn btn-link\" type=\"button\" @click=\"toggleCollapse\">\n             Add New Supplier\n              <span class=\"arrow\" :class=\"{ 'rotated': isCollapsed }\"></span>\n            </button>\n          </h5>\n        </b-card-header>\n        <b-collapse id=\"formCollapse\" v-model=\"isCollapsed\">\n          <b-card-body>\n            <form @submit.prevent=\"submitForm\">\n              <div class=\"form-group\">\n                <input v-model=\"formData.fund\" type=\"number\" class=\"form-control\" id=\"fund\" placeholder=\"Fund\" required>\n              </div>\n              <button type=\"submit\" class=\"btn btn-primary\">Add Supplier</button>\n            </form>\n          </b-card-body>\n        </b-collapse>\n      </b-card>\n      <!-- Your existing card -->\n      <card :title=\"table1.title\" :subTitle=\"table1.subTitle\">\n        <div slot=\"raw-content\" class=\"table-responsive\">\n          <table class=\"table\">\n            <thead>\n              <tr>\n                <th v-for=\"column in table1.columns\" :key=\"column\">{{ column }}</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"(item, index) in table1.data\" :key=\"index\">\n                <td v-for=\"(value, key) in item\" :key=\"key\">{{ value }}</td>\n                <td>\n                  <button class=\"btn btn-danger\" @click=\"deleteSupplier(item)\">Delete</button>\n                  <button class=\"btn btn-warning\" @click=\"editSupplier(item)\">Edit</button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </card>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { BCard, BCardHeader, BCardBody, BCollapse } from 'bootstrap-vue';\nimport axios from 'axios';\n\nexport default {\n  components: {\n    BCard,\n    BCardHeader,\n    BCardBody,\n    BCollapse,\n  },\n  data() {\n    return {\n      isCollapsed: false,\n      formData: {\n        fund: ''\n      },\n      table1: {\n        title: \"Supplier Table\",\n        subTitle: \"Here is a subtitle for this table\",\n        columns: [\"ID\", \"Fund\"],\n        data: [] // Initialize as empty array\n      }\n    };\n  },\n  mounted() {\n    this.fetchSuppliers(); // Fetch suppliers when the component is mounted\n  },\n  methods: {\n    toggleCollapse() {\n      this.isCollapsed = !this.isCollapsed;\n    },\n    async fetchSuppliers() {\n      try {\n        // Fetch suppliers from your server-side endpoint\n        const response = await axios.get('http://localhost:5000/fournisseurRoute');\n        // Map fetched data to match the table structure\n        this.table1.data = response.data.data.map(supplier => ({\n          ID: supplier.id,\n          Fund: supplier.FondCaisse,\n         \n        }));\n      } catch (error) {\n        console.error('Error fetching suppliers:', error);\n      }\n    },\n    async submitForm() {\n      try {\n        // Send POST request to add a new supplier\n        const response = await axios.post('http://localhost:5000/fournisseurRoute', {\n          FondCaisse: this.formData.fund\n        });\n        // Update the table data if the request is successful\n        if (response.status === 201) {\n          this.table1.data.push({\n            ID: response.data.id,\n            Fund: response.data.FondCaisse,\n           \n          });\n          // Clear the form after adding the supplier\n          this.formData.fund = '';\n        }\n      } catch (error) {\n        console.error('Error adding supplier:', error);\n      }\n    },\n    async deleteSupplier(supplier) {\n      const confirmation = confirm(\"Are you sure you want to delete this supplier?\");\n      if (confirmation) {\n        try {\n          // Send DELETE request to delete the supplier\n          await axios.delete(`http://localhost:5000/fournisseurRoute/${supplier.ID}`);\n          // Refresh the table after deletion\n          this.fetchSuppliers();\n        } catch (error) {\n          console.error('Error deleting supplier:', error);\n        }\n      }\n    },\n    editSupplier(supplier) {\n      const newFund = prompt(\"Enter the new fund:\", supplier.Fund);\n      if (newFund !== null) {\n        axios.put(`http://localhost:5000/fournisseurRoute/${supplier.ID}`, {\n          FondCaisse: newFund\n        })\n        .then(() => {\n          this.fetchSuppliers(); // Refresh the table after editing\n        })\n        .catch(error => {\n          console.error('Error editing supplier:', error);\n        });\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Styling for the arrow */\n.arrow {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  vertical-align: middle;\n  border: solid;\n  border-width: 0.2em 0.2em 0 0.2em;\n  border-color: #000000;\n  transition: transform 0.3s;\n}\n\n/* Styling for the arrow when the form is collapsed */\n.rotated {\n  transform: rotate(-90deg);\n}\n</style>\n"]}]}